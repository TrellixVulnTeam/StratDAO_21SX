{"ast":null,"code":"import { Contract } from \"ethers\";\nimport { getTokenPrice } from \"../token-price\";\nexport class Bond {\n  // Bond ABI\n  // The following two fields will differ on how they are set depending on bond type\n  // Token ABI\n  // Async method that returns a Promise\n  constructor(type, bondOpts) {\n    this.name = void 0;\n    this.displayName = void 0;\n    this.type = void 0;\n    this.bondIconSvg = void 0;\n    this.bondContractABI = void 0;\n    this.networkAddrs = void 0;\n    this.bondToken = void 0;\n    this.lpUrl = void 0;\n    this.isActive = void 0;\n    this.isLP = void 0;\n    this.reserveContractAbi = void 0;\n    this.displayUnits = void 0;\n    this.name = bondOpts.name;\n    this.displayName = bondOpts.displayName;\n    this.type = type;\n    this.bondIconSvg = bondOpts.bondIconSvg;\n    this.bondContractABI = bondOpts.bondContractABI;\n    this.networkAddrs = bondOpts.networkAddrs;\n    this.bondToken = bondOpts.bondToken;\n    this.isActive = bondOpts.isActive;\n  }\n\n  getAddressForBond(networkID) {\n    return this.networkAddrs[networkID].bondAddress;\n  }\n\n  getContractForBond(networkID, provider) {\n    const bondAddress = this.getAddressForBond(networkID);\n    return new Contract(bondAddress, this.bondContractABI, provider);\n  }\n\n  getAddressForReserve(networkID) {\n    return this.networkAddrs[networkID].reserveAddress;\n  }\n\n  getContractForReserve(networkID, provider) {\n    const reserveAddress = this.getAddressForReserve(networkID);\n    return new Contract(reserveAddress, this.reserveContractAbi, provider);\n  }\n\n  getTokenPrice() {\n    return getTokenPrice(this.bondToken);\n  }\n\n}","map":{"version":3,"sources":["/Users/anthonymann/Desktop/Snowbank DAO/snowbank-frontend/src/helpers/bond/bond.ts"],"names":["Contract","getTokenPrice","Bond","constructor","type","bondOpts","name","displayName","bondIconSvg","bondContractABI","networkAddrs","bondToken","lpUrl","isActive","isLP","reserveContractAbi","displayUnits","getAddressForBond","networkID","bondAddress","getContractForBond","provider","getAddressForReserve","reserveAddress","getContractForReserve"],"mappings":"AAEA,SAA4BA,QAA5B,QAA4C,QAA5C;AAGA,SAASC,aAAT,QAA8B,gBAA9B;AAYA,OAAO,MAAeC,IAAf,CAAoB;AAK6B;AAMpD;AAE0D;AAG1D;AAKAC,EAAAA,WAAW,CAACC,IAAD,EAAiBC,QAAjB,EAAqC;AAAA,SApBhCC,IAoBgC;AAAA,SAnBhCC,WAmBgC;AAAA,SAlBhCH,IAkBgC;AAAA,SAjBhCI,WAiBgC;AAAA,SAhBhCC,eAgBgC;AAAA,SAfhCC,YAegC;AAAA,SAdhCC,SAcgC;AAAA,SAbhCC,KAagC;AAAA,SAZhCC,QAYgC;AAAA,SAThCC,IASgC;AAAA,SAR7BC,kBAQ6B;AAAA,SAPhCC,YAOgC;AAC5C,SAAKV,IAAL,GAAYD,QAAQ,CAACC,IAArB;AACA,SAAKC,WAAL,GAAmBF,QAAQ,CAACE,WAA5B;AACA,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKI,WAAL,GAAmBH,QAAQ,CAACG,WAA5B;AACA,SAAKC,eAAL,GAAuBJ,QAAQ,CAACI,eAAhC;AACA,SAAKC,YAAL,GAAoBL,QAAQ,CAACK,YAA7B;AACA,SAAKC,SAAL,GAAiBN,QAAQ,CAACM,SAA1B;AACA,SAAKE,QAAL,GAAgBR,QAAQ,CAACQ,QAAzB;AACH;;AAEMI,EAAAA,iBAAiB,CAACC,SAAD,EAAsB;AAC1C,WAAO,KAAKR,YAAL,CAAkBQ,SAAlB,EAA6BC,WAApC;AACH;;AAEMC,EAAAA,kBAAkB,CAACF,SAAD,EAAsBG,QAAtB,EAAuE;AAC5F,UAAMF,WAAW,GAAG,KAAKF,iBAAL,CAAuBC,SAAvB,CAApB;AACA,WAAO,IAAIlB,QAAJ,CAAamB,WAAb,EAA0B,KAAKV,eAA/B,EAAgDY,QAAhD,CAAP;AACH;;AAEMC,EAAAA,oBAAoB,CAACJ,SAAD,EAAsB;AAC7C,WAAO,KAAKR,YAAL,CAAkBQ,SAAlB,EAA6BK,cAApC;AACH;;AAEMC,EAAAA,qBAAqB,CAACN,SAAD,EAAsBG,QAAtB,EAAuE;AAC/F,UAAME,cAAc,GAAG,KAAKD,oBAAL,CAA0BJ,SAA1B,CAAvB;AACA,WAAO,IAAIlB,QAAJ,CAAauB,cAAb,EAA6B,KAAKR,kBAAlC,EAAsDM,QAAtD,CAAP;AACH;;AAESpB,EAAAA,aAAa,GAAW;AAC9B,WAAOA,aAAa,CAAC,KAAKU,SAAN,CAApB;AACH;;AApDsB","sourcesContent":["import { BondType, NetworkAddresses } from \"./constants\";\nimport { Networks } from \"../../constants/blockchain\";\nimport { ContractInterface, Contract } from \"ethers\";\nimport React from \"react\";\nimport { JsonRpcSigner, StaticJsonRpcProvider } from \"@ethersproject/providers\";\nimport { getTokenPrice } from \"../token-price\";\n\nexport interface BondOpts {\n    readonly name: string; // Internal name used for references\n    readonly displayName: string; // Displayname on UI\n    readonly bondIconSvg: string; //  SVG path for icons\n    readonly bondContractABI: ContractInterface; // ABI for contract\n    readonly networkAddrs: NetworkAddresses; // Mapping of network --> Addresses\n    readonly bondToken: string; // Unused, but native token to buy the bond.\n    readonly isActive: boolean; // Set to false to disable mint\n}\n\nexport abstract class Bond {\n    public readonly name: string;\n    public readonly displayName: string;\n    public readonly type: BondType;\n    public readonly bondIconSvg: string;\n    public readonly bondContractABI: ContractInterface; // Bond ABI\n    public readonly networkAddrs: NetworkAddresses;\n    public readonly bondToken: string;\n    public readonly lpUrl?: string;\n    public readonly isActive?: boolean;\n\n    // The following two fields will differ on how they are set depending on bond type\n    public abstract isLP: boolean;\n    protected abstract reserveContractAbi: ContractInterface; // Token ABI\n    public abstract displayUnits: string;\n\n    // Async method that returns a Promise\n    public abstract getTreasuryBalance(networkID: Networks, provider: StaticJsonRpcProvider): Promise<number>;\n    public abstract getTokenAmount(networkID: Networks, provider: StaticJsonRpcProvider): Promise<number>;\n    public abstract getSbAmount(networkID: Networks, provider: StaticJsonRpcProvider): Promise<number>;\n\n    constructor(type: BondType, bondOpts: BondOpts) {\n        this.name = bondOpts.name;\n        this.displayName = bondOpts.displayName;\n        this.type = type;\n        this.bondIconSvg = bondOpts.bondIconSvg;\n        this.bondContractABI = bondOpts.bondContractABI;\n        this.networkAddrs = bondOpts.networkAddrs;\n        this.bondToken = bondOpts.bondToken;\n        this.isActive = bondOpts.isActive;\n    }\n\n    public getAddressForBond(networkID: Networks) {\n        return this.networkAddrs[networkID].bondAddress;\n    }\n\n    public getContractForBond(networkID: Networks, provider: StaticJsonRpcProvider | JsonRpcSigner) {\n        const bondAddress = this.getAddressForBond(networkID);\n        return new Contract(bondAddress, this.bondContractABI, provider);\n    }\n\n    public getAddressForReserve(networkID: Networks) {\n        return this.networkAddrs[networkID].reserveAddress;\n    }\n\n    public getContractForReserve(networkID: Networks, provider: StaticJsonRpcProvider | JsonRpcSigner) {\n        const reserveAddress = this.getAddressForReserve(networkID);\n        return new Contract(reserveAddress, this.reserveContractAbi, provider);\n    }\n\n    protected getTokenPrice(): number {\n        return getTokenPrice(this.bondToken);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}