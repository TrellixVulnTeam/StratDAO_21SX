{"ast":null,"code":"var _jsxFileName = \"/Users/anthonymann/Desktop/Snowbank DAO/snowbank-frontend/src/Root/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useCallback } from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useAddress, useWeb3Context } from \"../hooks\";\nimport { calcBondDetails } from \"../store/slices/bond-slice\";\nimport { loadAppDetails } from \"../store/slices/app-slice\";\nimport { loadAccountDetails, calculateUserBondDetails, calculateUserTokenDetails } from \"../store/slices/account-slice\";\nimport Loading from \"../components/Loader\";\nimport useBonds from \"../hooks/bonds\";\nimport ViewBase from \"../components/ViewBase\";\nimport { Stake, Snowglobe, ChooseBond, Bond, Dashboard, NotFound, Redeem } from \"../views\";\nimport \"./style.scss\";\nimport useTokens from \"../hooks/tokens\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    connect,\n    provider,\n    hasCachedProvider,\n    chainID,\n    connected\n  } = useWeb3Context();\n  const address = useAddress();\n  const [walletChecked, setWalletChecked] = useState(false);\n  const isAppLoading = useSelector(state => state.app.loading);\n  const isAppLoaded = useSelector(state => !Boolean(state.app.marketPrice));\n  const {\n    bonds\n  } = useBonds();\n  const {\n    tokens\n  } = useTokens();\n\n  async function loadDetails(whichDetails) {\n    let loadProvider = provider;\n\n    if (whichDetails === \"app\") {\n      loadApp(loadProvider);\n    }\n\n    if (whichDetails === \"account\" && address && connected) {\n      loadAccount(loadProvider);\n      if (isAppLoaded) return;\n      loadApp(loadProvider);\n    }\n\n    if (whichDetails === \"userBonds\" && address && connected) {\n      bonds.map(bond => {\n        dispatch(calculateUserBondDetails({\n          address,\n          bond,\n          provider,\n          networkID: chainID\n        }));\n      });\n    }\n\n    if (whichDetails === \"userTokens\" && address && connected) {\n      tokens.map(token => {\n        dispatch(calculateUserTokenDetails({\n          address,\n          token,\n          provider,\n          networkID: chainID\n        }));\n      });\n    }\n  }\n\n  const loadApp = useCallback(loadProvider => {\n    dispatch(loadAppDetails({\n      networkID: chainID,\n      provider: loadProvider\n    }));\n    bonds.map(bond => {\n      dispatch(calcBondDetails({\n        bond,\n        value: null,\n        provider: loadProvider,\n        networkID: chainID\n      }));\n    });\n    tokens.map(token => {\n      dispatch(calculateUserTokenDetails({\n        address: \"\",\n        token,\n        provider,\n        networkID: chainID\n      }));\n    });\n  }, [connected]);\n  const loadAccount = useCallback(loadProvider => {\n    dispatch(loadAccountDetails({\n      networkID: chainID,\n      address,\n      provider: loadProvider\n    }));\n  }, [connected]);\n  useEffect(() => {\n    if (hasCachedProvider()) {\n      connect().then(() => {\n        setWalletChecked(true);\n      });\n    } else {\n      setWalletChecked(true);\n    }\n  }, []);\n  useEffect(() => {\n    if (walletChecked) {\n      loadDetails(\"app\");\n      loadDetails(\"account\");\n      loadDetails(\"userBonds\");\n      loadDetails(\"userTokens\");\n    }\n  }, [walletChecked]);\n  useEffect(() => {\n    if (connected) {\n      loadDetails(\"app\");\n      loadDetails(\"account\");\n      loadDetails(\"userBonds\");\n      loadDetails(\"userTokens\");\n    }\n  }, [connected]);\n  if (isAppLoading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 30\n  }, this);\n  return /*#__PURE__*/_jsxDEV(ViewBase, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/dashboard\",\n        children: /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        children: /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/stake\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/stake\",\n        children: /*#__PURE__*/_jsxDEV(Stake, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/redeem\",\n        children: /*#__PURE__*/_jsxDEV(Redeem, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/snowglobe\",\n        children: /*#__PURE__*/_jsxDEV(Snowglobe, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/mints\",\n        children: [bonds.map(bond => {\n          return /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: `/mints/${bond.name}`,\n            children: /*#__PURE__*/_jsxDEV(Bond, {\n              bond: bond\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 33\n            }, this)\n          }, bond.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 29\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(ChooseBond, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        component: NotFound\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"3EkqifO/3SsLlyTbBWDt2oyOtDY=\", false, function () {\n  return [useDispatch, useWeb3Context, useAddress, useSelector, useSelector, useBonds, useTokens];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/anthonymann/Desktop/Snowbank DAO/snowbank-frontend/src/Root/App.tsx"],"names":["useEffect","useState","useCallback","Route","Redirect","Switch","useDispatch","useSelector","useAddress","useWeb3Context","calcBondDetails","loadAppDetails","loadAccountDetails","calculateUserBondDetails","calculateUserTokenDetails","Loading","useBonds","ViewBase","Stake","Snowglobe","ChooseBond","Bond","Dashboard","NotFound","Redeem","useTokens","App","dispatch","connect","provider","hasCachedProvider","chainID","connected","address","walletChecked","setWalletChecked","isAppLoading","state","app","loading","isAppLoaded","Boolean","marketPrice","bonds","tokens","loadDetails","whichDetails","loadProvider","loadApp","loadAccount","map","bond","networkID","token","value","then","name"],"mappings":"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","sourcesContent":["import { useEffect, useState, useCallback } from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useAddress, useWeb3Context } from \"../hooks\";\nimport { calcBondDetails } from \"../store/slices/bond-slice\";\nimport { loadAppDetails } from \"../store/slices/app-slice\";\nimport { loadAccountDetails, calculateUserBondDetails, calculateUserTokenDetails } from \"../store/slices/account-slice\";\nimport { IReduxState } from \"../store/slices/state.interface\";\nimport Loading from \"../components/Loader\";\nimport useBonds from \"../hooks/bonds\";\nimport ViewBase from \"../components/ViewBase\";\nimport { Stake, Snowglobe, ChooseBond, Bond, Dashboard, NotFound, Redeem } from \"../views\";\nimport \"./style.scss\";\nimport useTokens from \"../hooks/tokens\";\n\nfunction App() {\n    const dispatch = useDispatch();\n\n    const { connect, provider, hasCachedProvider, chainID, connected } = useWeb3Context();\n    const address = useAddress();\n\n    const [walletChecked, setWalletChecked] = useState(false);\n\n    const isAppLoading = useSelector<IReduxState, boolean>(state => state.app.loading);\n    const isAppLoaded = useSelector<IReduxState, boolean>(state => !Boolean(state.app.marketPrice));\n\n    const { bonds } = useBonds();\n    const { tokens } = useTokens();\n\n    async function loadDetails(whichDetails: string) {\n        let loadProvider = provider;\n\n        if (whichDetails === \"app\") {\n            loadApp(loadProvider);\n        }\n\n        if (whichDetails === \"account\" && address && connected) {\n            loadAccount(loadProvider);\n            if (isAppLoaded) return;\n\n            loadApp(loadProvider);\n        }\n\n        if (whichDetails === \"userBonds\" && address && connected) {\n            bonds.map(bond => {\n                dispatch(calculateUserBondDetails({ address, bond, provider, networkID: chainID }));\n            });\n        }\n\n        if (whichDetails === \"userTokens\" && address && connected) {\n            tokens.map(token => {\n                dispatch(calculateUserTokenDetails({ address, token, provider, networkID: chainID }));\n            });\n        }\n    }\n\n    const loadApp = useCallback(\n        loadProvider => {\n            dispatch(loadAppDetails({ networkID: chainID, provider: loadProvider }));\n            bonds.map(bond => {\n                dispatch(calcBondDetails({ bond, value: null, provider: loadProvider, networkID: chainID }));\n            });\n            tokens.map(token => {\n                dispatch(calculateUserTokenDetails({ address: \"\", token, provider, networkID: chainID }));\n            });\n        },\n        [connected],\n    );\n\n    const loadAccount = useCallback(\n        loadProvider => {\n            dispatch(loadAccountDetails({ networkID: chainID, address, provider: loadProvider }));\n        },\n        [connected],\n    );\n\n    useEffect(() => {\n        if (hasCachedProvider()) {\n            connect().then(() => {\n                setWalletChecked(true);\n            });\n        } else {\n            setWalletChecked(true);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (walletChecked) {\n            loadDetails(\"app\");\n            loadDetails(\"account\");\n            loadDetails(\"userBonds\");\n            loadDetails(\"userTokens\");\n        }\n    }, [walletChecked]);\n\n    useEffect(() => {\n        if (connected) {\n            loadDetails(\"app\");\n            loadDetails(\"account\");\n            loadDetails(\"userBonds\");\n            loadDetails(\"userTokens\");\n        }\n    }, [connected]);\n\n    if (isAppLoading) return <Loading />;\n\n    return (\n        <ViewBase>\n            <Switch>\n                <Route exact path=\"/dashboard\">\n                    <Dashboard />\n                </Route>\n\n                <Route exact path=\"/\">\n                    <Redirect to=\"/stake\" />\n                </Route>\n\n                <Route path=\"/stake\">\n                    <Stake />\n                </Route>\n\n                <Route path=\"/redeem\">\n                    <Redeem />\n                </Route>\n\n                <Route path=\"/snowglobe\">\n                    <Snowglobe />\n                </Route>\n\n                <Route path=\"/mints\">\n                    {bonds.map(bond => {\n                        return (\n                            <Route exact key={bond.name} path={`/mints/${bond.name}`}>\n                                <Bond bond={bond} />\n                            </Route>\n                        );\n                    })}\n                    <ChooseBond />\n                </Route>\n\n                <Route component={NotFound} />\n            </Switch>\n        </ViewBase>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}