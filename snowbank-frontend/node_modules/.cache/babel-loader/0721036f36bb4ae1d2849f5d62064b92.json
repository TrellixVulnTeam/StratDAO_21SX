{"ast":null,"code":"import { Bond } from \"./bond\";\nimport { BondType } from \"./constants\";\nimport { getAddresses } from \"../../constants/addresses\";\nexport class StableBond extends Bond {\n  constructor(stableBondOpts) {\n    super(BondType.StableAsset, stableBondOpts); // For stable bonds the display units are the same as the actual token\n\n    this.isLP = false;\n    this.reserveContractAbi = void 0;\n    this.displayUnits = void 0;\n    this.displayUnits = stableBondOpts.displayName;\n    this.reserveContractAbi = stableBondOpts.reserveContractAbi;\n  }\n\n  async getTreasuryBalance(networkID, provider) {\n    const addresses = getAddresses(networkID);\n    const token = this.getContractForReserve(networkID, provider);\n    const tokenAmount = await token.balanceOf(addresses.TREASURY_ADDRESS);\n    return tokenAmount / Math.pow(10, 18);\n  }\n\n  async getTokenAmount(networkID, provider) {\n    return this.getTreasuryBalance(networkID, provider);\n  }\n\n  getSbAmount(networkID, provider) {\n    return new Promise(reserve => reserve(0));\n  }\n\n} // These are special bonds that have different valuation methods\n\nexport class CustomBond extends StableBond {\n  constructor(customBondOpts) {\n    super(customBondOpts);\n\n    this.getTreasuryBalance = async (networkID, provider) => {\n      const tokenAmount = await super.getTreasuryBalance(networkID, provider);\n      const tokenPrice = this.getTokenPrice();\n      return tokenAmount * tokenPrice;\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/anthonymann/Desktop/Snowbank DAO/snowbank-frontend/src/helpers/bond/stable-bond.ts"],"names":["Bond","BondType","getAddresses","StableBond","constructor","stableBondOpts","StableAsset","isLP","reserveContractAbi","displayUnits","displayName","getTreasuryBalance","networkID","provider","addresses","token","getContractForReserve","tokenAmount","balanceOf","TREASURY_ADDRESS","Math","pow","getTokenAmount","getSbAmount","Promise","reserve","CustomBond","customBondOpts","tokenPrice","getTokenPrice"],"mappings":"AACA,SAASA,IAAT,QAA+B,QAA/B;AACA,SAASC,QAAT,QAAyB,aAAzB;AAGA,SAASC,YAAT,QAA6B,2BAA7B;AAMA,OAAO,MAAMC,UAAN,SAAyBH,IAAzB,CAA8B;AAKjCI,EAAAA,WAAW,CAACC,cAAD,EAAiC;AACxC,UAAMJ,QAAQ,CAACK,WAAf,EAA4BD,cAA5B,EADwC,CAGxC;;AAHwC,SAJnCE,IAImC,GAJ5B,KAI4B;AAAA,SAHnCC,kBAGmC;AAAA,SAFnCC,YAEmC;AAIxC,SAAKA,YAAL,GAAoBJ,cAAc,CAACK,WAAnC;AACA,SAAKF,kBAAL,GAA0BH,cAAc,CAACG,kBAAzC;AACH;;AAE8B,QAAlBG,kBAAkB,CAACC,SAAD,EAAsBC,QAAtB,EAAuD;AAClF,UAAMC,SAAS,GAAGZ,YAAY,CAACU,SAAD,CAA9B;AACA,UAAMG,KAAK,GAAG,KAAKC,qBAAL,CAA2BJ,SAA3B,EAAsCC,QAAtC,CAAd;AACA,UAAMI,WAAW,GAAG,MAAMF,KAAK,CAACG,SAAN,CAAgBJ,SAAS,CAACK,gBAA1B,CAA1B;AACA,WAAOF,WAAW,GAAGG,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,EAAb,CAArB;AACH;;AAE0B,QAAdC,cAAc,CAACV,SAAD,EAAsBC,QAAtB,EAAuD;AAC9E,WAAO,KAAKF,kBAAL,CAAwBC,SAAxB,EAAmCC,QAAnC,CAAP;AACH;;AAEMU,EAAAA,WAAW,CAACX,SAAD,EAAsBC,QAAtB,EAAuD;AACrE,WAAO,IAAIW,OAAJ,CAAoBC,OAAO,IAAIA,OAAO,CAAC,CAAD,CAAtC,CAAP;AACH;;AA1BgC,C,CA6BrC;;AAGA,OAAO,MAAMC,UAAN,SAAyBvB,UAAzB,CAAoC;AACvCC,EAAAA,WAAW,CAACuB,cAAD,EAAiC;AACxC,UAAMA,cAAN;;AAEA,SAAKhB,kBAAL,GAA0B,OAAOC,SAAP,EAA4BC,QAA5B,KAAgE;AACtF,YAAMI,WAAW,GAAG,MAAM,MAAMN,kBAAN,CAAyBC,SAAzB,EAAoCC,QAApC,CAA1B;AACA,YAAMe,UAAU,GAAG,KAAKC,aAAL,EAAnB;AAEA,aAAOZ,WAAW,GAAGW,UAArB;AACH,KALD;AAMH;;AAVsC","sourcesContent":["import { ContractInterface } from \"ethers\";\nimport { Bond, BondOpts } from \"./bond\";\nimport { BondType } from \"./constants\";\nimport { Networks } from \"../../constants/blockchain\";\nimport { StaticJsonRpcProvider } from \"@ethersproject/providers\";\nimport { getAddresses } from \"../../constants/addresses\";\n\nexport interface StableBondOpts extends BondOpts {\n    readonly reserveContractAbi: ContractInterface;\n}\n\nexport class StableBond extends Bond {\n    readonly isLP = false;\n    readonly reserveContractAbi: ContractInterface;\n    readonly displayUnits: string;\n\n    constructor(stableBondOpts: StableBondOpts) {\n        super(BondType.StableAsset, stableBondOpts);\n\n        // For stable bonds the display units are the same as the actual token\n        this.displayUnits = stableBondOpts.displayName;\n        this.reserveContractAbi = stableBondOpts.reserveContractAbi;\n    }\n\n    public async getTreasuryBalance(networkID: Networks, provider: StaticJsonRpcProvider) {\n        const addresses = getAddresses(networkID);\n        const token = this.getContractForReserve(networkID, provider);\n        const tokenAmount = await token.balanceOf(addresses.TREASURY_ADDRESS);\n        return tokenAmount / Math.pow(10, 18);\n    }\n\n    public async getTokenAmount(networkID: Networks, provider: StaticJsonRpcProvider) {\n        return this.getTreasuryBalance(networkID, provider);\n    }\n\n    public getSbAmount(networkID: Networks, provider: StaticJsonRpcProvider) {\n        return new Promise<number>(reserve => reserve(0));\n    }\n}\n\n// These are special bonds that have different valuation methods\nexport interface CustomBondOpts extends StableBondOpts {}\n\nexport class CustomBond extends StableBond {\n    constructor(customBondOpts: CustomBondOpts) {\n        super(customBondOpts);\n\n        this.getTreasuryBalance = async (networkID: Networks, provider: StaticJsonRpcProvider) => {\n            const tokenAmount = await super.getTreasuryBalance(networkID, provider);\n            const tokenPrice = this.getTokenPrice();\n\n            return tokenAmount * tokenPrice;\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}