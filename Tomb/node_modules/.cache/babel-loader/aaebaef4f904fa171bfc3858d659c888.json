{"ast":null,"code":"// import { Fetcher, Route, Token } from '@uniswap/sdk';\nimport { Fetcher as FetcherSpirit, Token as TokenSpirit } from '@spiritswap/sdk';\nimport { Fetcher, Route, Token } from '@spookyswap/sdk';\nimport { BigNumber, Contract, ethers } from 'ethers';\nimport { decimalToBalance } from './ether-utils';\nimport ERC20 from './ERC20';\nimport { getFullDisplayBalance, getDisplayBalance } from '../utils/formatBalance';\nimport { getDefaultProvider } from '../utils/provider';\nimport IUniswapV2PairABI from './IUniswapV2Pair.abi.json';\nimport config, { bankDefinitions } from '../config';\nimport moment from 'moment';\nimport { parseUnits } from 'ethers/lib/utils';\nimport { FTM_TICKER, SPOOKY_ROUTER_ADDR, TOMB_TICKER } from '../utils/constants';\n/**\n * An API module of Tomb Finance contracts.\n * All contract-interacting domain logic should be defined in here.\n */\n\nexport class TombFinance {\n  constructor(cfg) {\n    this.myAccount = void 0;\n    this.provider = void 0;\n    this.signer = void 0;\n    this.config = void 0;\n    this.contracts = void 0;\n    this.externalTokens = void 0;\n    this.masonryVersionOfUser = void 0;\n    this.TOMBWFTM_LP = void 0;\n    this.TOMB = void 0;\n    this.TSHARE = void 0;\n    this.TBOND = void 0;\n    this.FTM = void 0;\n    const {\n      deployments,\n      externalTokens\n    } = cfg;\n    const provider = getDefaultProvider(); // loads contracts from deployments\n\n    this.contracts = {};\n\n    for (const [name, deployment] of Object.entries(deployments)) {\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\n    }\n\n    this.externalTokens = {};\n\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal);\n    }\n\n    this.TOMB = new ERC20(deployments.tomb.address, provider, 'TOMB');\n    this.TSHARE = new ERC20(deployments.tShare.address, provider, 'TSHARE');\n    this.TBOND = new ERC20(deployments.tBond.address, provider, 'TBOND');\n    this.FTM = this.externalTokens['WFTM']; // Uniswap V2 Pair\n\n    this.TOMBWFTM_LP = new Contract(externalTokens['TOMB-FTM-LP'][0], IUniswapV2PairABI, provider);\n    this.config = cfg;\n    this.provider = provider;\n  }\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n\n\n  unlockWallet(provider, account) {\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n\n    const tokens = [this.TOMB, this.TSHARE, this.TBOND, ...Object.values(this.externalTokens)];\n\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n\n    this.TOMBWFTM_LP = this.TOMBWFTM_LP.connect(this.signer);\n    console.log(`ðŸ”“ Wallet is unlocked. Welcome, ${account}!`);\n    this.fetchMasonryVersionOfUser().then(version => this.masonryVersionOfUser = version).catch(err => {\n      console.error(`Failed to fetch masonry version: ${err.stack}`);\n      this.masonryVersionOfUser = 'latest';\n    });\n  }\n\n  get isUnlocked() {\n    return !!this.myAccount;\n  } //===================================================================\n  //===================== GET ASSET STATS =============================\n  //===================FROM SPOOKY TO DISPLAY =========================\n  //=========================IN HOME PAGE==============================\n  //===================================================================\n\n\n  async getTombStat() {\n    const {\n      TombFtmRewardPool,\n      TombFtmLpTombRewardPool,\n      TombFtmLpTombRewardPoolOld\n    } = this.contracts;\n    const supply = await this.TOMB.totalSupply();\n    const tombRewardPoolSupply = await this.TOMB.balanceOf(TombFtmRewardPool.address);\n    const tombRewardPoolSupply2 = await this.TOMB.balanceOf(TombFtmLpTombRewardPool.address);\n    const tombRewardPoolSupplyOld = await this.TOMB.balanceOf(TombFtmLpTombRewardPoolOld.address);\n    const tombCirculatingSupply = supply.sub(tombRewardPoolSupply).sub(tombRewardPoolSupply2).sub(tombRewardPoolSupplyOld);\n    const priceInFTM = await this.getTokenPriceFromPancakeswap(this.TOMB);\n    const priceOfOneFTM = await this.getWFTMPriceFromPancakeswap();\n    const priceOfTombInDollars = (Number(priceInFTM) * Number(priceOfOneFTM)).toFixed(2);\n    return {\n      tokenInFtm: priceInFTM,\n      priceInDollars: priceOfTombInDollars,\n      totalSupply: getDisplayBalance(supply, this.TOMB.decimal, 0),\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.TOMB.decimal, 0)\n    };\n  }\n  /**\n   * Calculates various stats for the requested LP\n   * @param name of the LP token to load stats for\n   * @returns\n   */\n\n\n  async getLPStat(name) {\n    const lpToken = this.externalTokens[name];\n    const lpTokenSupplyBN = await lpToken.totalSupply();\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\n    const token0 = name.startsWith('TOMB') ? this.TOMB : this.TSHARE;\n    const isTomb = name.startsWith('TOMB');\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\n    const ftmAmountBN = await this.FTM.balanceOf(lpToken.address);\n    const ftmAmount = getDisplayBalance(ftmAmountBN, 18);\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\n    const ftmAmountInOneLP = Number(ftmAmount) / Number(lpTokenSupply);\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isTomb);\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\n    return {\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\n      priceOfOne: lpTokenPriceFixed,\n      totalLiquidity: liquidity,\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString()\n    };\n  }\n  /**\n   * Use this method to get price for Tomb\n   * @returns TokenStat for TBOND\n   * priceInFTM\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n\n\n  async getBondStat() {\n    const {\n      Treasury\n    } = this.contracts;\n    const tombStat = await this.getTombStat();\n    const bondTombRatioBN = await Treasury.getBondPremiumRate();\n    const modifier = bondTombRatioBN / 1e18 > 1 ? bondTombRatioBN / 1e18 : 1;\n    const bondPriceInFTM = (Number(tombStat.tokenInFtm) * modifier).toFixed(2);\n    const priceOfTBondInDollars = (Number(tombStat.priceInDollars) * modifier).toFixed(2);\n    const supply = await this.TBOND.displayedTotalSupply();\n    return {\n      tokenInFtm: bondPriceInFTM,\n      priceInDollars: priceOfTBondInDollars,\n      totalSupply: supply,\n      circulatingSupply: supply\n    };\n  }\n  /**\n   * @returns TokenStat for TSHARE\n   * priceInFTM\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n\n\n  async getShareStat() {\n    const {\n      TombFtmLPTShareRewardPool\n    } = this.contracts;\n    const supply = await this.TSHARE.totalSupply();\n    const priceInFTM = await this.getTokenPriceFromPancakeswap(this.TSHARE);\n    const tombRewardPoolSupply = await this.TSHARE.balanceOf(TombFtmLPTShareRewardPool.address);\n    const tShareCirculatingSupply = supply.sub(tombRewardPoolSupply);\n    const priceOfOneFTM = await this.getWFTMPriceFromPancakeswap();\n    const priceOfSharesInDollars = (Number(priceInFTM) * Number(priceOfOneFTM)).toFixed(2);\n    return {\n      tokenInFtm: priceInFTM,\n      priceInDollars: priceOfSharesInDollars,\n      totalSupply: getDisplayBalance(supply, this.TSHARE.decimal, 0),\n      circulatingSupply: getDisplayBalance(tShareCirculatingSupply, this.TSHARE.decimal, 0)\n    };\n  }\n\n  async getTombStatInEstimatedTWAP() {\n    const {\n      SeigniorageOracle,\n      TombFtmRewardPool\n    } = this.contracts;\n    const expectedPrice = await SeigniorageOracle.twap(this.TOMB.address, ethers.utils.parseEther('1'));\n    const supply = await this.TOMB.totalSupply();\n    const tombRewardPoolSupply = await this.TOMB.balanceOf(TombFtmRewardPool.address);\n    const tombCirculatingSupply = supply.sub(tombRewardPoolSupply);\n    return {\n      tokenInFtm: getDisplayBalance(expectedPrice),\n      priceInDollars: getDisplayBalance(expectedPrice),\n      totalSupply: getDisplayBalance(supply, this.TOMB.decimal, 0),\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.TOMB.decimal, 0)\n    };\n  }\n\n  async getTombPriceInLastTWAP() {\n    const {\n      Treasury\n    } = this.contracts;\n    return Treasury.getTombUpdatedPrice();\n  }\n\n  async getBondsPurchasable() {\n    const {\n      Treasury\n    } = this.contracts;\n    return Treasury.getBurnableTombLeft();\n  }\n  /**\n   * Calculates the TVL, APR and daily APR of a provided pool/bank\n   * @param bank\n   * @returns\n   */\n\n\n  async getPoolAPRs(bank) {\n    if (this.myAccount === undefined) return;\n    const depositToken = bank.depositToken;\n    const poolContract = this.contracts[bank.contract];\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken);\n    const stakeInPool = await depositToken.balanceOf(bank.address);\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const stat = bank.earnTokenName === '3OMB' ? await this.getTombStat() : await this.getShareStat();\n    const tokenPerSecond = await this.getTokenPerSecond(bank.earnTokenName, bank.contract, poolContract, bank.depositTokenName);\n    const tokenPerHour = tokenPerSecond.mul(60).mul(60);\n    const totalRewardPricePerYear = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\n    const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\n    const totalStakingTokenInPool = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const dailyAPR = totalRewardPricePerDay / totalStakingTokenInPool * 100;\n    const yearlyAPR = totalRewardPricePerYear / totalStakingTokenInPool * 100;\n    return {\n      dailyAPR: dailyAPR.toFixed(2).toString(),\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\n      TVL: TVL.toFixed(2).toString()\n    };\n  }\n  /**\n   * Method to return the amount of tokens the pool yields per second\n   * @param earnTokenName the name of the token that the pool is earning\n   * @param contractName the contract of the pool/bank\n   * @param poolContract the actual contract of the pool\n   * @returns\n   */\n\n\n  async getTokenPerSecond(earnTokenName, contractName, poolContract, depositTokenName) {\n    if (earnTokenName === '3OMB') {\n      if (!contractName.endsWith('TombRewardPool')) {\n        const rewardPerSecond = await poolContract.tombPerSecond();\n\n        if (depositTokenName === '2SHARES') {\n          return rewardPerSecond.mul(7500).div(25000).div(24).mul(20);\n        } else if (depositTokenName === '2OMB') {\n          return rewardPerSecond.mul(5000).div(25000).div(24).mul(20);\n        } else if (depositTokenName === 'BELUGA') {\n          return rewardPerSecond.mul(1000).div(25000).div(24).mul(20);\n        } else if (depositTokenName === 'BIFI') {\n          return rewardPerSecond.mul(1000).div(25000).div(24).mul(20);\n        } else if (depositTokenName === 'WFTM') {\n          return rewardPerSecond.mul(1000).div(25000).div(24).mul(20);\n        } else if (depositTokenName === 'MIM') {\n          return rewardPerSecond.mul(1000).div(25000).div(24).mul(20);\n        }\n\n        return rewardPerSecond.div(24);\n      }\n\n      const poolStartTime = await poolContract.poolStartTime();\n      const startDateTime = new Date(poolStartTime.toNumber() * 1000);\n      const FOUR_DAYS = 4 * 24 * 60 * 60 * 1000;\n\n      if (Date.now() - startDateTime.getTime() > FOUR_DAYS) {\n        return await poolContract.epochTombPerSecond(1);\n      }\n\n      return await poolContract.epochTombPerSecond(0);\n    }\n\n    const rewardPerSecond = await poolContract.tSharePerSecond();\n\n    if (depositTokenName.startsWith('TOMB')) {\n      return rewardPerSecond.mul(35500).div(59500);\n    } else {\n      return rewardPerSecond.mul(24000).div(59500);\n    }\n  }\n  /**\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\n   * If the deposited token is an LP it will find the price of its pieces\n   * @param tokenName\n   * @param pool\n   * @param token\n   * @returns\n   */\n\n\n  async getDepositTokenPriceInDollars(tokenName, token) {\n    let tokenPrice;\n    const priceOfOneFtmInDollars = await this.getWFTMPriceFromPancakeswap();\n\n    if (tokenName === 'wFTM') {\n      tokenPrice = priceOfOneFtmInDollars;\n    } else {\n      if (tokenName === 'TOMB-FTM-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.TOMB, true);\n      } else if (tokenName === 'TSHARE-FTM-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.TSHARE, false);\n      } else if (tokenName === 'SHIBA') {\n        tokenPrice = await this.getTokenPriceFromSpiritswap(token);\n      } else {\n        tokenPrice = await this.getTokenPriceFromPancakeswap(token);\n        tokenPrice = (Number(tokenPrice) * Number(priceOfOneFtmInDollars)).toString();\n      }\n    }\n\n    return tokenPrice;\n  } //===================================================================\n  //===================== GET ASSET STATS =============================\n  //=========================== END ===================================\n  //===================================================================\n\n\n  async getCurrentEpoch() {\n    const {\n      Treasury\n    } = this.contracts;\n    return Treasury.epoch();\n  }\n\n  async getBondOraclePriceInLastTWAP() {\n    const {\n      Treasury\n    } = this.contracts;\n    return Treasury.getBondPremiumRate();\n  }\n  /**\n   * Buy bonds with cash.\n   * @param amount amount of cash to purchase bonds with.\n   */\n\n\n  async buyBonds(amount) {\n    const {\n      Treasury\n    } = this.contracts;\n    const treasuryTombPrice = await Treasury.getTombPrice();\n    return await Treasury.buyBonds(decimalToBalance(amount), treasuryTombPrice);\n  }\n  /**\n   * Redeem bonds for cash.\n   * @param amount amount of bonds to redeem.\n   */\n\n\n  async redeemBonds(amount) {\n    const {\n      Treasury\n    } = this.contracts;\n    const priceForTomb = await Treasury.getTombPrice();\n    return await Treasury.redeemBonds(decimalToBalance(amount), priceForTomb);\n  }\n\n  async getTotalValueLocked() {\n    let totalValue = 0;\n\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      const pool = this.contracts[bankInfo.contract];\n      const token = this.externalTokens[bankInfo.depositTokenName];\n      const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\n      const tokenAmountInPool = await token.balanceOf(pool.address);\n      const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\n      const poolValue = Number.isNaN(value) ? 0 : value;\n      totalValue += poolValue;\n    }\n\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const masonrytShareBalanceOf = await this.TSHARE.balanceOf(this.currentMasonry().address);\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.TSHARE.decimal)) * Number(TSHAREPrice);\n    return totalValue + masonryTVL;\n  }\n  /**\n   * Calculates the price of an LP token\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\n   * @param lpToken the token under calculation\n   * @param token the token pair used as reference (the other one would be FTM in most cases)\n   * @param isTomb sanity check for usage of tomb token or tShare\n   * @returns price of the LP token\n   */\n\n\n  async getLPTokenPrice(lpToken, token, isTomb) {\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal); //Get amount of tokenA\n\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\n    const stat = isTomb === true ? await this.getTombStat() : await this.getShareStat();\n    const priceOfToken = stat.priceInDollars;\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2). //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n    toString();\n    return tokenPrice;\n  }\n\n  async earnedFromBank(poolName, earnTokenName, poolId, account = this.myAccount) {\n    const pool = this.contracts[poolName];\n\n    try {\n      if (earnTokenName === '3OMB') {\n        return await pool.pendingTOMB(poolId, account);\n      } else {\n        return await pool.pendingShare(poolId, account);\n      }\n    } catch (err) {\n      console.error(`Failed to call earned() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  async stakedBalanceOnBank(poolName, poolId, account = this.myAccount) {\n    const pool = this.contracts[poolName];\n\n    try {\n      let userInfo = await pool.userInfo(poolId, account);\n      return await userInfo.amount;\n    } catch (err) {\n      console.error(`Failed to call balanceOf() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n  /**\n   * Deposits token to given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n\n\n  async stake(poolName, poolId, amount) {\n    const pool = this.contracts[poolName];\n    return await pool.deposit(poolId, amount);\n  }\n  /**\n   * Withdraws token from given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n\n\n  async unstake(poolName, poolId, amount) {\n    const pool = this.contracts[poolName];\n    return await pool.withdraw(poolId, amount);\n  }\n  /**\n   * Transfers earned token reward from given pool to my account.\n   */\n\n\n  async harvest(poolName, poolId) {\n    const pool = this.contracts[poolName]; //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\n\n    return await pool.withdraw(poolId, 0);\n  }\n  /**\n   * Harvests and withdraws deposited tokens from the pool.\n   */\n\n\n  async exit(poolName, poolId, account = this.myAccount) {\n    const pool = this.contracts[poolName];\n    let userInfo = await pool.userInfo(poolId, account);\n    return await pool.withdraw(poolId, userInfo.amount);\n  }\n\n  async fetchMasonryVersionOfUser() {\n    return 'latest';\n  }\n\n  currentMasonry() {\n    if (!this.masonryVersionOfUser) {//throw new Error('you must unlock the wallet to continue.');\n    }\n\n    return this.contracts.Masonry;\n  }\n\n  isOldMasonryMember() {\n    return this.masonryVersionOfUser !== 'latest';\n  }\n\n  async getTokenPriceFromPancakeswap(tokenContract) {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const {\n      chainId\n    } = this.config;\n    const {\n      WFTM\n    } = this.config.externalTokens;\n    const wftm = new Token(chainId, WFTM[0], WFTM[1]);\n    const token = new Token(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n\n    try {\n      const wftmToToken = await Fetcher.fetchPairData(wftm, token, this.provider);\n      const priceInBUSD = new Route([wftmToToken], token);\n      return priceInBUSD.midPrice.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromSpiritswap(tokenContract) {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const {\n      chainId\n    } = this.config;\n    const {\n      WFTM\n    } = this.externalTokens;\n    const wftm = new TokenSpirit(chainId, WFTM.address, WFTM.decimal);\n    const token = new TokenSpirit(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n\n    try {\n      const wftmToToken = await FetcherSpirit.fetchPairData(wftm, token, this.provider);\n      const liquidityToken = wftmToToken.liquidityToken;\n      let ftmBalanceInLP = await WFTM.balanceOf(liquidityToken.address);\n      let ftmAmount = Number(getFullDisplayBalance(ftmBalanceInLP, WFTM.decimal));\n      let shibaBalanceInLP = await tokenContract.balanceOf(liquidityToken.address);\n      let shibaAmount = Number(getFullDisplayBalance(shibaBalanceInLP, tokenContract.decimal));\n      const priceOfOneFtmInDollars = await this.getWFTMPriceFromPancakeswap();\n      let priceOfShiba = ftmAmount / shibaAmount * Number(priceOfOneFtmInDollars);\n      return priceOfShiba.toString();\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getWFTMPriceFromPancakeswap() {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const {\n      WFTM,\n      FUSDT\n    } = this.externalTokens;\n\n    try {\n      const fusdt_wftm_lp_pair = this.externalTokens['USDT-FTM-LP'];\n      let ftm_amount_BN = await WFTM.balanceOf(fusdt_wftm_lp_pair.address);\n      let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, WFTM.decimal));\n      let fusdt_amount_BN = await FUSDT.balanceOf(fusdt_wftm_lp_pair.address);\n      let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, FUSDT.decimal));\n      return (fusdt_amount / ftm_amount).toString();\n    } catch (err) {\n      console.error(`Failed to fetch token price of WFTM: ${err}`);\n    }\n  } //===================================================================\n  //===================================================================\n  //===================== MASONRY METHODS =============================\n  //===================================================================\n  //===================================================================\n\n\n  async getMasonryAPR() {\n    const Masonry = this.currentMasonry();\n    const latestSnapshotIndex = await Masonry.latestSnapshotIndex();\n    const lastHistory = await Masonry.masonryHistory(latestSnapshotIndex);\n    const lastRewardsReceived = lastHistory[1];\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const TOMBPrice = (await this.getTombStat()).priceInDollars;\n    const epochRewardsPerShare = lastRewardsReceived / 1e18; //Mgod formula\n\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(TOMBPrice) * 4;\n    const masonrytShareBalanceOf = await this.TSHARE.balanceOf(Masonry.address);\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.TSHARE.decimal)) * Number(TSHAREPrice);\n    const realAPR = amountOfRewardsPerDay * 100 / masonryTVL * 365;\n    return realAPR;\n  }\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Masonry\n   * @returns true if user can withdraw reward, false if they can't\n   */\n\n\n  async canUserClaimRewardFromMasonry() {\n    const Masonry = this.currentMasonry();\n    return await Masonry.canClaimReward(this.myAccount);\n  }\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Masonry\n   * @returns true if user can withdraw reward, false if they can't\n   */\n\n\n  async canUserUnstakeFromMasonry() {\n    const Masonry = this.currentMasonry();\n    const canWithdraw = await Masonry.canWithdraw(this.myAccount);\n    const stakedAmount = await this.getStakedSharesOnMasonry();\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.TSHARE.decimal)) === 0;\n    const result = notStaked ? true : canWithdraw;\n    return result;\n  }\n\n  async timeUntilClaimRewardFromMasonry() {\n    // const Masonry = this.currentMasonry();\n    // const mason = await Masonry.masons(this.myAccount);\n    return BigNumber.from(0);\n  }\n\n  async getTotalStakedInMasonry() {\n    const Masonry = this.currentMasonry();\n    return await Masonry.totalSupply();\n  }\n\n  async stakeShareToMasonry(amount) {\n    if (this.isOldMasonryMember()) {\n      throw new Error(\"you're using old masonry. please withdraw and deposit the TSHARE again.\");\n    }\n\n    const Masonry = this.currentMasonry();\n    return await Masonry.stake(decimalToBalance(amount));\n  }\n\n  async getStakedSharesOnMasonry() {\n    const Masonry = this.currentMasonry();\n\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.getShareOf(this.myAccount);\n    }\n\n    return await Masonry.balanceOf(this.myAccount);\n  }\n\n  async getEarningsOnMasonry() {\n    const Masonry = this.currentMasonry();\n\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.getCashEarningsOf(this.myAccount);\n    }\n\n    return await Masonry.earned(this.myAccount);\n  }\n\n  async withdrawShareFromMasonry(amount) {\n    const Masonry = this.currentMasonry();\n    return await Masonry.withdraw(decimalToBalance(amount));\n  }\n\n  async harvestCashFromMasonry() {\n    const Masonry = this.currentMasonry();\n\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.claimDividends();\n    }\n\n    return await Masonry.claimReward();\n  }\n\n  async exitFromMasonry() {\n    const Masonry = this.currentMasonry();\n    return await Masonry.exit();\n  }\n\n  async getTreasuryNextAllocationTime() {\n    const {\n      Treasury\n    } = this.contracts;\n    const nextEpochTimestamp = await Treasury.nextEpochPoint();\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\n    const prevAllocation = new Date(Date.now());\n    return {\n      from: prevAllocation,\n      to: nextAllocation\n    };\n  }\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to claim\n   * their reward from the masonry\n   * @returns Promise<AllocationTime>\n   */\n\n\n  async getUserClaimRewardTime() {\n    const {\n      Masonry,\n      Treasury\n    } = this.contracts;\n    const nextEpochTimestamp = await Masonry.nextEpochPoint(); //in unix timestamp\n\n    const currentEpoch = await Masonry.epoch();\n    const mason = await Masonry.masons(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const periodInHours = period / 60 / 60; // 6 hours, period is displayed in seconds which is 21600\n\n    const rewardLockupEpochs = await Masonry.rewardLockupEpochs();\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(rewardLockupEpochs);\n    const fromDate = new Date(Date.now());\n\n    if (targetEpochForClaimUnlock - currentEpoch <= 0) {\n      return {\n        from: fromDate,\n        to: fromDate\n      };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return {\n        from: fromDate,\n        to: toDate\n      };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - currentEpoch - 1;\n      const endDate = moment(toDate).add(delta * periodInHours, 'hours').toDate();\n      return {\n        from: fromDate,\n        to: endDate\n      };\n    }\n  }\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to unstake\n   * from the masonry\n   * @returns Promise<AllocationTime>\n   */\n\n\n  async getUserUnstakeTime() {\n    const {\n      Masonry,\n      Treasury\n    } = this.contracts;\n    const nextEpochTimestamp = await Masonry.nextEpochPoint();\n    const currentEpoch = await Masonry.epoch();\n    const mason = await Masonry.masons(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const PeriodInHours = period / 60 / 60;\n    const withdrawLockupEpochs = await Masonry.withdrawLockupEpochs();\n    const fromDate = new Date(Date.now());\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(withdrawLockupEpochs);\n    const stakedAmount = await this.getStakedSharesOnMasonry();\n\n    if (currentEpoch <= targetEpochForClaimUnlock && Number(stakedAmount) === 0) {\n      return {\n        from: fromDate,\n        to: fromDate\n      };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return {\n        from: fromDate,\n        to: toDate\n      };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - Number(currentEpoch) - 1;\n      const endDate = moment(toDate).add(delta * PeriodInHours, 'hours').toDate();\n      return {\n        from: fromDate,\n        to: endDate\n      };\n    }\n  }\n\n  async watchAssetInMetamask(assetName) {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum && ethereum.networkVersion === config.chainId.toString()) {\n      let asset;\n      let assetUrl;\n\n      if (assetName === 'TOMB') {\n        asset = this.TOMB;\n        assetUrl = 'https://tomb.finance/presskit/tomb_icon_noBG.png';\n      } else if (assetName === 'TSHARE') {\n        asset = this.TSHARE;\n        assetUrl = 'https://tomb.finance/presskit/tshare_icon_noBG.png';\n      } else if (assetName === 'TBOND') {\n        asset = this.TBOND;\n        assetUrl = 'https://tomb.finance/presskit/tbond_icon_noBG.png';\n      }\n\n      await ethereum.request({\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20',\n          options: {\n            address: asset.address,\n            symbol: asset.symbol,\n            decimals: 18,\n            image: assetUrl\n          }\n        }\n      });\n    }\n\n    return true;\n  }\n\n  async provideTombFtmLP(ftmAmount, tombAmount) {\n    const {\n      TaxOffice\n    } = this.contracts;\n    let overrides = {\n      value: parseUnits(ftmAmount, 18)\n    };\n    return await TaxOffice.addLiquidityETHTaxFree(tombAmount, tombAmount.mul(992).div(1000), parseUnits(ftmAmount, 18).mul(992).div(1000), overrides);\n  }\n\n  async quoteFromSpooky(tokenAmount, tokenName) {\n    const {\n      SpookyRouter\n    } = this.contracts;\n    const {\n      _reserve0,\n      _reserve1\n    } = await this.TOMBWFTM_LP.getReserves();\n    let quote;\n\n    if (tokenName === 'TOMB') {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve1, _reserve0);\n    } else {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve0, _reserve1);\n    }\n\n    return (quote / 1e18).toString();\n  }\n  /**\n   * @returns an array of the regulation events till the most up to date epoch\n   */\n\n\n  async listenForRegulationsEvents() {\n    const {\n      Treasury\n    } = this.contracts;\n    const treasuryDaoFundedFilter = Treasury.filters.DaoFundFunded();\n    const treasuryDevFundedFilter = Treasury.filters.DevFundFunded();\n    const treasuryMasonryFundedFilter = Treasury.filters.MasonryFunded();\n    const boughtBondsFilter = Treasury.filters.BoughtBonds();\n    const redeemBondsFilter = Treasury.filters.RedeemedBonds();\n    let epochBlocksRanges = [];\n    let masonryFundEvents = await Treasury.queryFilter(treasuryMasonryFundedFilter);\n    var events = [];\n    masonryFundEvents.forEach(function callback(value, index) {\n      events.push({\n        epoch: index + 1\n      });\n      events[index].masonryFund = getDisplayBalance(value.args[1]);\n\n      if (index === 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0\n        });\n      }\n\n      if (index > 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0\n        });\n        epochBlocksRanges[index - 1].endBlock = value.blockNumber;\n      }\n    });\n    epochBlocksRanges.forEach(async (value, index) => {\n      events[index].bondsBought = await this.getBondsWithFilterForPeriod(boughtBondsFilter, value.startBlock, value.endBlock);\n      events[index].bondsRedeemed = await this.getBondsWithFilterForPeriod(redeemBondsFilter, value.startBlock, value.endBlock);\n    });\n    let DEVFundEvents = await Treasury.queryFilter(treasuryDevFundedFilter);\n    DEVFundEvents.forEach(function callback(value, index) {\n      events[index].devFund = getDisplayBalance(value.args[1]);\n    });\n    let DAOFundEvents = await Treasury.queryFilter(treasuryDaoFundedFilter);\n    DAOFundEvents.forEach(function callback(value, index) {\n      events[index].daoFund = getDisplayBalance(value.args[1]);\n    });\n    return events;\n  }\n  /**\n   * Helper method\n   * @param filter applied on the query to the treasury events\n   * @param from block number\n   * @param to block number\n   * @returns the amount of bonds events emitted based on the filter provided during a specific period\n   */\n\n\n  async getBondsWithFilterForPeriod(filter, from, to) {\n    const {\n      Treasury\n    } = this.contracts;\n    const bondsAmount = await Treasury.queryFilter(filter, from, to);\n    return bondsAmount.length;\n  }\n\n  async estimateZapIn(tokenName, lpName, amount) {\n    const {\n      zapper\n    } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n    let estimate;\n\n    if (tokenName === FTM_TICKER) {\n      estimate = await zapper.estimateZapIn(lpToken.address, SPOOKY_ROUTER_ADDR, parseUnits(amount, 18));\n    } else {\n      const token = tokenName === TOMB_TICKER ? this.TOMB : this.TSHARE;\n      estimate = await zapper.estimateZapInToken(token.address, lpToken.address, SPOOKY_ROUTER_ADDR, parseUnits(amount, 18));\n    }\n\n    return [estimate[0] / 1e18, estimate[1] / 1e18];\n  }\n\n  async zapIn(tokenName, lpName, amount) {\n    const {\n      zapper\n    } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n\n    if (tokenName === FTM_TICKER) {\n      let overrides = {\n        value: parseUnits(amount, 18)\n      };\n      return await zapper.zapIn(lpToken.address, SPOOKY_ROUTER_ADDR, this.myAccount, overrides);\n    } else {\n      const token = tokenName === TOMB_TICKER ? this.TOMB : this.TSHARE;\n      return await zapper.zapInToken(token.address, parseUnits(amount, 18), lpToken.address, SPOOKY_ROUTER_ADDR, this.myAccount);\n    }\n  }\n\n  async swapTBondToTShare(tbondAmount) {\n    const {\n      TShareSwapper\n    } = this.contracts;\n    return await TShareSwapper.swapTBondToTShare(tbondAmount);\n  }\n\n  async estimateAmountOfTShare(tbondAmount) {\n    const {\n      TShareSwapper\n    } = this.contracts;\n\n    try {\n      const estimateBN = await TShareSwapper.estimateAmountOfTShare(parseUnits(tbondAmount, 18));\n      return getDisplayBalance(estimateBN, 18, 6);\n    } catch (err) {\n      console.error(`Failed to fetch estimate tshare amount: ${err}`);\n    }\n  }\n\n  async getTShareSwapperStat(address) {\n    const {\n      TShareSwapper\n    } = this.contracts;\n    const tshareBalanceBN = await TShareSwapper.getTShareBalance();\n    const tbondBalanceBN = await TShareSwapper.getTBondBalance(address); // const tombPriceBN = await TShareSwapper.getTombPrice();\n    // const tsharePriceBN = await TShareSwapper.getTSharePrice();\n\n    const rateTSharePerTombBN = await TShareSwapper.getTShareAmountPerTomb();\n    const tshareBalance = getDisplayBalance(tshareBalanceBN, 18, 5);\n    const tbondBalance = getDisplayBalance(tbondBalanceBN, 18, 5);\n    return {\n      tshareBalance: tshareBalance.toString(),\n      tbondBalance: tbondBalance.toString(),\n      // tombPrice: tombPriceBN.toString(),\n      // tsharePrice: tsharePriceBN.toString(),\n      rateTSharePerTomb: rateTSharePerTombBN.toString()\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/anthonymann/Desktop/Snowbank DAO/Tomb/src/tomb-finance/TombFinance.ts"],"names":["Fetcher","FetcherSpirit","Token","TokenSpirit","Route","BigNumber","Contract","ethers","decimalToBalance","ERC20","getFullDisplayBalance","getDisplayBalance","getDefaultProvider","IUniswapV2PairABI","config","bankDefinitions","moment","parseUnits","FTM_TICKER","SPOOKY_ROUTER_ADDR","TOMB_TICKER","TombFinance","constructor","cfg","myAccount","provider","signer","contracts","externalTokens","masonryVersionOfUser","TOMBWFTM_LP","TOMB","TSHARE","TBOND","FTM","deployments","name","deployment","Object","entries","address","abi","symbol","decimal","tomb","tShare","tBond","unlockWallet","account","newProvider","providers","Web3Provider","chainId","getSigner","contract","connect","tokens","values","token","console","log","fetchMasonryVersionOfUser","then","version","catch","err","error","stack","isUnlocked","getTombStat","TombFtmRewardPool","TombFtmLpTombRewardPool","TombFtmLpTombRewardPoolOld","supply","totalSupply","tombRewardPoolSupply","balanceOf","tombRewardPoolSupply2","tombRewardPoolSupplyOld","tombCirculatingSupply","sub","priceInFTM","getTokenPriceFromPancakeswap","priceOfOneFTM","getWFTMPriceFromPancakeswap","priceOfTombInDollars","Number","toFixed","tokenInFtm","priceInDollars","circulatingSupply","getLPStat","lpToken","lpTokenSupplyBN","lpTokenSupply","token0","startsWith","isTomb","tokenAmountBN","tokenAmount","ftmAmountBN","ftmAmount","tokenAmountInOneLP","ftmAmountInOneLP","lpTokenPrice","getLPTokenPrice","lpTokenPriceFixed","toString","liquidity","priceOfOne","totalLiquidity","getBondStat","Treasury","tombStat","bondTombRatioBN","getBondPremiumRate","modifier","bondPriceInFTM","priceOfTBondInDollars","displayedTotalSupply","getShareStat","TombFtmLPTShareRewardPool","tShareCirculatingSupply","priceOfSharesInDollars","getTombStatInEstimatedTWAP","SeigniorageOracle","expectedPrice","twap","utils","parseEther","getTombPriceInLastTWAP","getTombUpdatedPrice","getBondsPurchasable","getBurnableTombLeft","getPoolAPRs","bank","undefined","depositToken","poolContract","depositTokenPrice","getDepositTokenPriceInDollars","depositTokenName","stakeInPool","TVL","stat","earnTokenName","tokenPerSecond","getTokenPerSecond","tokenPerHour","mul","totalRewardPricePerYear","totalRewardPricePerDay","totalStakingTokenInPool","dailyAPR","yearlyAPR","contractName","endsWith","rewardPerSecond","tombPerSecond","div","poolStartTime","startDateTime","Date","toNumber","FOUR_DAYS","now","getTime","epochTombPerSecond","tSharePerSecond","tokenName","tokenPrice","priceOfOneFtmInDollars","getTokenPriceFromSpiritswap","getCurrentEpoch","epoch","getBondOraclePriceInLastTWAP","buyBonds","amount","treasuryTombPrice","getTombPrice","redeemBonds","priceForTomb","getTotalValueLocked","totalValue","bankInfo","pool","tokenAmountInPool","value","poolValue","isNaN","TSHAREPrice","masonrytShareBalanceOf","currentMasonry","masonryTVL","tokenSupply","priceOfToken","tokenInLP","earnedFromBank","poolName","poolId","pendingTOMB","pendingShare","from","stakedBalanceOnBank","userInfo","stake","deposit","unstake","withdraw","harvest","exit","Masonry","isOldMasonryMember","tokenContract","ready","WFTM","wftm","wftmToToken","fetchPairData","priceInBUSD","midPrice","liquidityToken","ftmBalanceInLP","shibaBalanceInLP","shibaAmount","priceOfShiba","FUSDT","fusdt_wftm_lp_pair","ftm_amount_BN","ftm_amount","fusdt_amount_BN","fusdt_amount","getMasonryAPR","latestSnapshotIndex","lastHistory","masonryHistory","lastRewardsReceived","TOMBPrice","epochRewardsPerShare","amountOfRewardsPerDay","realAPR","canUserClaimRewardFromMasonry","canClaimReward","canUserUnstakeFromMasonry","canWithdraw","stakedAmount","getStakedSharesOnMasonry","notStaked","result","timeUntilClaimRewardFromMasonry","getTotalStakedInMasonry","stakeShareToMasonry","Error","getShareOf","getEarningsOnMasonry","getCashEarningsOf","earned","withdrawShareFromMasonry","harvestCashFromMasonry","claimDividends","claimReward","exitFromMasonry","getTreasuryNextAllocationTime","nextEpochTimestamp","nextEpochPoint","nextAllocation","prevAllocation","to","getUserClaimRewardTime","currentEpoch","mason","masons","startTimeEpoch","epochTimerStart","period","PERIOD","periodInHours","rewardLockupEpochs","targetEpochForClaimUnlock","fromDate","toDate","delta","endDate","add","getUserUnstakeTime","PeriodInHours","withdrawLockupEpochs","watchAssetInMetamask","assetName","ethereum","window","networkVersion","asset","assetUrl","request","method","params","type","options","decimals","image","provideTombFtmLP","tombAmount","TaxOffice","overrides","addLiquidityETHTaxFree","quoteFromSpooky","SpookyRouter","_reserve0","_reserve1","getReserves","quote","listenForRegulationsEvents","treasuryDaoFundedFilter","filters","DaoFundFunded","treasuryDevFundedFilter","DevFundFunded","treasuryMasonryFundedFilter","MasonryFunded","boughtBondsFilter","BoughtBonds","redeemBondsFilter","RedeemedBonds","epochBlocksRanges","masonryFundEvents","queryFilter","events","forEach","callback","index","push","masonryFund","args","startBlock","blockNumber","boughBonds","redeemedBonds","endBlock","bondsBought","getBondsWithFilterForPeriod","bondsRedeemed","DEVFundEvents","devFund","DAOFundEvents","daoFund","filter","bondsAmount","length","estimateZapIn","lpName","zapper","estimate","estimateZapInToken","zapIn","zapInToken","swapTBondToTShare","tbondAmount","TShareSwapper","estimateAmountOfTShare","estimateBN","getTShareSwapperStat","tshareBalanceBN","getTShareBalance","tbondBalanceBN","getTBondBalance","rateTSharePerTombBN","getTShareAmountPerTomb","tshareBalance","tbondBalance","rateTSharePerTomb"],"mappings":"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","sourcesContent":["// import { Fetcher, Route, Token } from '@uniswap/sdk';\nimport { Fetcher as FetcherSpirit, Token as TokenSpirit } from '@spiritswap/sdk';\nimport { Fetcher, Route, Token } from '@spookyswap/sdk';\nimport { Configuration } from './config';\nimport { ContractName, TokenStat, AllocationTime, LPStat, Bank, PoolStats, TShareSwapperStat } from './types';\nimport { BigNumber, Contract, ethers, EventFilter } from 'ethers';\nimport { decimalToBalance } from './ether-utils';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport ERC20 from './ERC20';\nimport { getFullDisplayBalance, getDisplayBalance } from '../utils/formatBalance';\nimport { getDefaultProvider } from '../utils/provider';\nimport IUniswapV2PairABI from './IUniswapV2Pair.abi.json';\nimport config, { bankDefinitions } from '../config';\nimport moment from 'moment';\nimport { parseUnits } from 'ethers/lib/utils';\nimport { FTM_TICKER, SPOOKY_ROUTER_ADDR, TOMB_TICKER } from '../utils/constants';\n/**\n * An API module of Tomb Finance contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class TombFinance {\n  myAccount: string;\n  provider: ethers.providers.Web3Provider;\n  signer?: ethers.Signer;\n  config: Configuration;\n  contracts: { [name: string]: Contract };\n  externalTokens: { [name: string]: ERC20 };\n  masonryVersionOfUser?: string;\n\n  TOMBWFTM_LP: Contract;\n  TOMB: ERC20;\n  TSHARE: ERC20;\n  TBOND: ERC20;\n  FTM: ERC20;\n\n  constructor(cfg: Configuration) {\n    const { deployments, externalTokens } = cfg;\n    const provider = getDefaultProvider();\n\n    // loads contracts from deployments\n    this.contracts = {};\n    for (const [name, deployment] of Object.entries(deployments)) {\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\n    }\n    this.externalTokens = {};\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal);\n    }\n    this.TOMB = new ERC20(deployments.tomb.address, provider, 'TOMB');\n    this.TSHARE = new ERC20(deployments.tShare.address, provider, 'TSHARE');\n    this.TBOND = new ERC20(deployments.tBond.address, provider, 'TBOND');\n    this.FTM = this.externalTokens['WFTM'];\n\n    // Uniswap V2 Pair\n    this.TOMBWFTM_LP = new Contract(externalTokens['TOMB-FTM-LP'][0], IUniswapV2PairABI, provider);\n\n    this.config = cfg;\n    this.provider = provider;\n  }\n\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n  unlockWallet(provider: any, account: string) {\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n    const tokens = [this.TOMB, this.TSHARE, this.TBOND, ...Object.values(this.externalTokens)];\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n    this.TOMBWFTM_LP = this.TOMBWFTM_LP.connect(this.signer);\n    console.log(`ðŸ”“ Wallet is unlocked. Welcome, ${account}!`);\n    this.fetchMasonryVersionOfUser()\n      .then((version) => (this.masonryVersionOfUser = version))\n      .catch((err) => {\n        console.error(`Failed to fetch masonry version: ${err.stack}`);\n        this.masonryVersionOfUser = 'latest';\n      });\n  }\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //===================FROM SPOOKY TO DISPLAY =========================\n  //=========================IN HOME PAGE==============================\n  //===================================================================\n\n  async getTombStat(): Promise<TokenStat> {\n    const { TombFtmRewardPool, TombFtmLpTombRewardPool, TombFtmLpTombRewardPoolOld } = this.contracts;\n    const supply = await this.TOMB.totalSupply();\n    const tombRewardPoolSupply = await this.TOMB.balanceOf(TombFtmRewardPool.address);\n    const tombRewardPoolSupply2 = await this.TOMB.balanceOf(TombFtmLpTombRewardPool.address);\n    const tombRewardPoolSupplyOld = await this.TOMB.balanceOf(TombFtmLpTombRewardPoolOld.address);\n    const tombCirculatingSupply = supply\n      .sub(tombRewardPoolSupply)\n      .sub(tombRewardPoolSupply2)\n      .sub(tombRewardPoolSupplyOld);\n    const priceInFTM = await this.getTokenPriceFromPancakeswap(this.TOMB);\n    const priceOfOneFTM = await this.getWFTMPriceFromPancakeswap();\n    const priceOfTombInDollars = (Number(priceInFTM) * Number(priceOfOneFTM)).toFixed(2);\n\n    return {\n      tokenInFtm: priceInFTM,\n      priceInDollars: priceOfTombInDollars,\n      totalSupply: getDisplayBalance(supply, this.TOMB.decimal, 0),\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.TOMB.decimal, 0),\n    };\n  }\n\n  /**\n   * Calculates various stats for the requested LP\n   * @param name of the LP token to load stats for\n   * @returns\n   */\n  async getLPStat(name: string): Promise<LPStat> {\n    const lpToken = this.externalTokens[name];\n    const lpTokenSupplyBN = await lpToken.totalSupply();\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\n    const token0 = name.startsWith('TOMB') ? this.TOMB : this.TSHARE;\n    const isTomb = name.startsWith('TOMB');\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\n\n    const ftmAmountBN = await this.FTM.balanceOf(lpToken.address);\n    const ftmAmount = getDisplayBalance(ftmAmountBN, 18);\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\n    const ftmAmountInOneLP = Number(ftmAmount) / Number(lpTokenSupply);\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isTomb);\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\n    return {\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\n      priceOfOne: lpTokenPriceFixed,\n      totalLiquidity: liquidity,\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\n    };\n  }\n\n  /**\n   * Use this method to get price for Tomb\n   * @returns TokenStat for TBOND\n   * priceInFTM\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n  async getBondStat(): Promise<TokenStat> {\n    const { Treasury } = this.contracts;\n    const tombStat = await this.getTombStat();\n    const bondTombRatioBN = await Treasury.getBondPremiumRate();\n    const modifier = bondTombRatioBN / 1e18 > 1 ? bondTombRatioBN / 1e18 : 1;\n    const bondPriceInFTM = (Number(tombStat.tokenInFtm) * modifier).toFixed(2);\n    const priceOfTBondInDollars = (Number(tombStat.priceInDollars) * modifier).toFixed(2);\n    const supply = await this.TBOND.displayedTotalSupply();\n    return {\n      tokenInFtm: bondPriceInFTM,\n      priceInDollars: priceOfTBondInDollars,\n      totalSupply: supply,\n      circulatingSupply: supply,\n    };\n  }\n\n  /**\n   * @returns TokenStat for TSHARE\n   * priceInFTM\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n  async getShareStat(): Promise<TokenStat> {\n    const { TombFtmLPTShareRewardPool } = this.contracts;\n\n    const supply = await this.TSHARE.totalSupply();\n\n    const priceInFTM = await this.getTokenPriceFromPancakeswap(this.TSHARE);\n    const tombRewardPoolSupply = await this.TSHARE.balanceOf(TombFtmLPTShareRewardPool.address);\n    const tShareCirculatingSupply = supply.sub(tombRewardPoolSupply);\n    const priceOfOneFTM = await this.getWFTMPriceFromPancakeswap();\n    const priceOfSharesInDollars = (Number(priceInFTM) * Number(priceOfOneFTM)).toFixed(2);\n\n    return {\n      tokenInFtm: priceInFTM,\n      priceInDollars: priceOfSharesInDollars,\n      totalSupply: getDisplayBalance(supply, this.TSHARE.decimal, 0),\n      circulatingSupply: getDisplayBalance(tShareCirculatingSupply, this.TSHARE.decimal, 0),\n    };\n  }\n\n  async getTombStatInEstimatedTWAP(): Promise<TokenStat> {\n    const { SeigniorageOracle, TombFtmRewardPool } = this.contracts;\n    const expectedPrice = await SeigniorageOracle.twap(this.TOMB.address, ethers.utils.parseEther('1'));\n\n    const supply = await this.TOMB.totalSupply();\n    const tombRewardPoolSupply = await this.TOMB.balanceOf(TombFtmRewardPool.address);\n    const tombCirculatingSupply = supply.sub(tombRewardPoolSupply);\n    return {\n      tokenInFtm: getDisplayBalance(expectedPrice),\n      priceInDollars: getDisplayBalance(expectedPrice),\n      totalSupply: getDisplayBalance(supply, this.TOMB.decimal, 0),\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.TOMB.decimal, 0),\n    };\n  }\n\n  async getTombPriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getTombUpdatedPrice();\n  }\n\n  async getBondsPurchasable(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getBurnableTombLeft();\n  }\n\n  /**\n   * Calculates the TVL, APR and daily APR of a provided pool/bank\n   * @param bank\n   * @returns\n   */\n  async getPoolAPRs(bank: Bank): Promise<PoolStats> {\n    if (this.myAccount === undefined) return;\n    const depositToken = bank.depositToken;\n    const poolContract = this.contracts[bank.contract];\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken);\n    const stakeInPool = await depositToken.balanceOf(bank.address);\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const stat = bank.earnTokenName === '3OMB' ? await this.getTombStat() : await this.getShareStat();\n    const tokenPerSecond = await this.getTokenPerSecond(\n      bank.earnTokenName,\n      bank.contract,\n      poolContract,\n      bank.depositTokenName,\n    );\n\n    const tokenPerHour = tokenPerSecond.mul(60).mul(60);\n    const totalRewardPricePerYear =\n      Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\n    const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\n    const totalStakingTokenInPool =\n      Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\n    const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\n    return {\n      dailyAPR: dailyAPR.toFixed(2).toString(),\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\n      TVL: TVL.toFixed(2).toString(),\n    };\n  }\n\n  /**\n   * Method to return the amount of tokens the pool yields per second\n   * @param earnTokenName the name of the token that the pool is earning\n   * @param contractName the contract of the pool/bank\n   * @param poolContract the actual contract of the pool\n   * @returns\n   */\n  async getTokenPerSecond(\n    earnTokenName: string,\n    contractName: string,\n    poolContract: Contract,\n    depositTokenName: string,\n  ) {\n    if (earnTokenName === '3OMB') {\n      if (!contractName.endsWith('TombRewardPool')) {\n        const rewardPerSecond = await poolContract.tombPerSecond();\n        if (depositTokenName === '2SHARES') {\n          return rewardPerSecond.mul(7500).div(25000).div(24).mul(20);\n        } else if (depositTokenName === '2OMB') {\n          return rewardPerSecond.mul(5000).div(25000).div(24).mul(20);\n        } else if (depositTokenName === 'BELUGA') {\n          return rewardPerSecond.mul(1000).div(25000).div(24).mul(20);\n        } else if (depositTokenName === 'BIFI') {\n          return rewardPerSecond.mul(1000).div(25000).div(24).mul(20);\n        } else if (depositTokenName === 'WFTM') {\n          return rewardPerSecond.mul(1000).div(25000).div(24).mul(20);\n        } else if (depositTokenName === 'MIM') {\n          return rewardPerSecond.mul(1000).div(25000).div(24).mul(20);\n        }\n        return rewardPerSecond.div(24);\n      }\n      const poolStartTime = await poolContract.poolStartTime();\n      const startDateTime = new Date(poolStartTime.toNumber() * 1000);\n      const FOUR_DAYS = 4 * 24 * 60 * 60 * 1000;\n      if (Date.now() - startDateTime.getTime() > FOUR_DAYS) {\n        return await poolContract.epochTombPerSecond(1);\n      }\n      return await poolContract.epochTombPerSecond(0);\n    }\n    const rewardPerSecond = await poolContract.tSharePerSecond();\n    if (depositTokenName.startsWith('TOMB')) {\n      return rewardPerSecond.mul(35500).div(59500);\n    } else {\n      return rewardPerSecond.mul(24000).div(59500);\n    }\n  }\n\n  /**\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\n   * If the deposited token is an LP it will find the price of its pieces\n   * @param tokenName\n   * @param pool\n   * @param token\n   * @returns\n   */\n  async getDepositTokenPriceInDollars(tokenName: string, token: ERC20) {\n    let tokenPrice;\n    const priceOfOneFtmInDollars = await this.getWFTMPriceFromPancakeswap();\n    if (tokenName === 'wFTM') {\n      tokenPrice = priceOfOneFtmInDollars;\n    } else {\n      if (tokenName === 'TOMB-FTM-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.TOMB, true);\n      } else if (tokenName === 'TSHARE-FTM-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.TSHARE, false);\n      } else if (tokenName === 'SHIBA') {\n        tokenPrice = await this.getTokenPriceFromSpiritswap(token);\n      } else {\n        tokenPrice = await this.getTokenPriceFromPancakeswap(token);\n        tokenPrice = (Number(tokenPrice) * Number(priceOfOneFtmInDollars)).toString();\n      }\n    }\n    return tokenPrice;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //=========================== END ===================================\n  //===================================================================\n\n  async getCurrentEpoch(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.epoch();\n  }\n\n  async getBondOraclePriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getBondPremiumRate();\n  }\n\n  /**\n   * Buy bonds with cash.\n   * @param amount amount of cash to purchase bonds with.\n   */\n  async buyBonds(amount: string | number): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    const treasuryTombPrice = await Treasury.getTombPrice();\n    return await Treasury.buyBonds(decimalToBalance(amount), treasuryTombPrice);\n  }\n\n  /**\n   * Redeem bonds for cash.\n   * @param amount amount of bonds to redeem.\n   */\n  async redeemBonds(amount: string): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    const priceForTomb = await Treasury.getTombPrice();\n    return await Treasury.redeemBonds(decimalToBalance(amount), priceForTomb);\n  }\n\n  async getTotalValueLocked(): Promise<Number> {\n    let totalValue = 0;\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      const pool = this.contracts[bankInfo.contract];\n      const token = this.externalTokens[bankInfo.depositTokenName];\n      const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\n      const tokenAmountInPool = await token.balanceOf(pool.address);\n      const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\n      const poolValue = Number.isNaN(value) ? 0 : value;\n      totalValue += poolValue;\n    }\n\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const masonrytShareBalanceOf = await this.TSHARE.balanceOf(this.currentMasonry().address);\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.TSHARE.decimal)) * Number(TSHAREPrice);\n\n    return totalValue + masonryTVL;\n  }\n\n  /**\n   * Calculates the price of an LP token\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\n   * @param lpToken the token under calculation\n   * @param token the token pair used as reference (the other one would be FTM in most cases)\n   * @param isTomb sanity check for usage of tomb token or tShare\n   * @returns price of the LP token\n   */\n  async getLPTokenPrice(lpToken: ERC20, token: ERC20, isTomb: boolean): Promise<string> {\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\n    //Get amount of tokenA\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\n    const stat = isTomb === true ? await this.getTombStat() : await this.getShareStat();\n    const priceOfToken = stat.priceInDollars;\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n      .toString();\n    return tokenPrice;\n  }\n\n  async earnedFromBank(\n    poolName: ContractName,\n    earnTokenName: String,\n    poolId: Number,\n    account = this.myAccount,\n  ): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      if (earnTokenName === '3OMB') {\n        return await pool.pendingTOMB(poolId, account);\n      } else {\n        return await pool.pendingShare(poolId, account);\n      }\n    } catch (err) {\n      console.error(`Failed to call earned() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  async stakedBalanceOnBank(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      let userInfo = await pool.userInfo(poolId, account);\n      return await userInfo.amount;\n    } catch (err) {\n      console.error(`Failed to call balanceOf() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  /**\n   * Deposits token to given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async stake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    return await pool.deposit(poolId, amount);\n  }\n\n  /**\n   * Withdraws token from given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async unstake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    return await pool.withdraw(poolId, amount);\n  }\n\n  /**\n   * Transfers earned token reward from given pool to my account.\n   */\n  async harvest(poolName: ContractName, poolId: Number): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\n    return await pool.withdraw(poolId, 0);\n  }\n\n  /**\n   * Harvests and withdraws deposited tokens from the pool.\n   */\n  async exit(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    let userInfo = await pool.userInfo(poolId, account);\n    return await pool.withdraw(poolId, userInfo.amount);\n  }\n\n  async fetchMasonryVersionOfUser(): Promise<string> {\n    return 'latest';\n  }\n\n  currentMasonry(): Contract {\n    if (!this.masonryVersionOfUser) {\n      //throw new Error('you must unlock the wallet to continue.');\n    }\n    return this.contracts.Masonry;\n  }\n\n  isOldMasonryMember(): boolean {\n    return this.masonryVersionOfUser !== 'latest';\n  }\n\n  async getTokenPriceFromPancakeswap(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { chainId } = this.config;\n    const { WFTM } = this.config.externalTokens;\n\n    const wftm = new Token(chainId, WFTM[0], WFTM[1]);\n    const token = new Token(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    try {\n      const wftmToToken = await Fetcher.fetchPairData(wftm, token, this.provider);\n      const priceInBUSD = new Route([wftmToToken], token);\n\n      return priceInBUSD.midPrice.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromSpiritswap(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { chainId } = this.config;\n\n    const { WFTM } = this.externalTokens;\n\n    const wftm = new TokenSpirit(chainId, WFTM.address, WFTM.decimal);\n    const token = new TokenSpirit(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    try {\n      const wftmToToken = await FetcherSpirit.fetchPairData(wftm, token, this.provider);\n      const liquidityToken = wftmToToken.liquidityToken;\n      let ftmBalanceInLP = await WFTM.balanceOf(liquidityToken.address);\n      let ftmAmount = Number(getFullDisplayBalance(ftmBalanceInLP, WFTM.decimal));\n      let shibaBalanceInLP = await tokenContract.balanceOf(liquidityToken.address);\n      let shibaAmount = Number(getFullDisplayBalance(shibaBalanceInLP, tokenContract.decimal));\n      const priceOfOneFtmInDollars = await this.getWFTMPriceFromPancakeswap();\n      let priceOfShiba = (ftmAmount / shibaAmount) * Number(priceOfOneFtmInDollars);\n      return priceOfShiba.toString();\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getWFTMPriceFromPancakeswap(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { WFTM, FUSDT } = this.externalTokens;\n    try {\n      const fusdt_wftm_lp_pair = this.externalTokens['USDT-FTM-LP'];\n      let ftm_amount_BN = await WFTM.balanceOf(fusdt_wftm_lp_pair.address);\n      let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, WFTM.decimal));\n      let fusdt_amount_BN = await FUSDT.balanceOf(fusdt_wftm_lp_pair.address);\n      let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, FUSDT.decimal));\n      return (fusdt_amount / ftm_amount).toString();\n    } catch (err) {\n      console.error(`Failed to fetch token price of WFTM: ${err}`);\n    }\n  }\n\n  //===================================================================\n  //===================================================================\n  //===================== MASONRY METHODS =============================\n  //===================================================================\n  //===================================================================\n\n  async getMasonryAPR() {\n    const Masonry = this.currentMasonry();\n    const latestSnapshotIndex = await Masonry.latestSnapshotIndex();\n    const lastHistory = await Masonry.masonryHistory(latestSnapshotIndex);\n\n    const lastRewardsReceived = lastHistory[1];\n\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const TOMBPrice = (await this.getTombStat()).priceInDollars;\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\n\n    //Mgod formula\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(TOMBPrice) * 4;\n    const masonrytShareBalanceOf = await this.TSHARE.balanceOf(Masonry.address);\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.TSHARE.decimal)) * Number(TSHAREPrice);\n    const realAPR = ((amountOfRewardsPerDay * 100) / masonryTVL) * 365;\n    return realAPR;\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Masonry\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserClaimRewardFromMasonry(): Promise<boolean> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.canClaimReward(this.myAccount);\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Masonry\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserUnstakeFromMasonry(): Promise<boolean> {\n    const Masonry = this.currentMasonry();\n    const canWithdraw = await Masonry.canWithdraw(this.myAccount);\n    const stakedAmount = await this.getStakedSharesOnMasonry();\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.TSHARE.decimal)) === 0;\n    const result = notStaked ? true : canWithdraw;\n    return result;\n  }\n\n  async timeUntilClaimRewardFromMasonry(): Promise<BigNumber> {\n    // const Masonry = this.currentMasonry();\n    // const mason = await Masonry.masons(this.myAccount);\n    return BigNumber.from(0);\n  }\n\n  async getTotalStakedInMasonry(): Promise<BigNumber> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.totalSupply();\n  }\n\n  async stakeShareToMasonry(amount: string): Promise<TransactionResponse> {\n    if (this.isOldMasonryMember()) {\n      throw new Error(\"you're using old masonry. please withdraw and deposit the TSHARE again.\");\n    }\n    const Masonry = this.currentMasonry();\n    return await Masonry.stake(decimalToBalance(amount));\n  }\n\n  async getStakedSharesOnMasonry(): Promise<BigNumber> {\n    const Masonry = this.currentMasonry();\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.getShareOf(this.myAccount);\n    }\n    return await Masonry.balanceOf(this.myAccount);\n  }\n\n  async getEarningsOnMasonry(): Promise<BigNumber> {\n    const Masonry = this.currentMasonry();\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.getCashEarningsOf(this.myAccount);\n    }\n    return await Masonry.earned(this.myAccount);\n  }\n\n  async withdrawShareFromMasonry(amount: string): Promise<TransactionResponse> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.withdraw(decimalToBalance(amount));\n  }\n\n  async harvestCashFromMasonry(): Promise<TransactionResponse> {\n    const Masonry = this.currentMasonry();\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.claimDividends();\n    }\n    return await Masonry.claimReward();\n  }\n\n  async exitFromMasonry(): Promise<TransactionResponse> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.exit();\n  }\n\n  async getTreasuryNextAllocationTime(): Promise<AllocationTime> {\n    const { Treasury } = this.contracts;\n    const nextEpochTimestamp: BigNumber = await Treasury.nextEpochPoint();\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\n    const prevAllocation = new Date(Date.now());\n\n    return { from: prevAllocation, to: nextAllocation };\n  }\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to claim\n   * their reward from the masonry\n   * @returns Promise<AllocationTime>\n   */\n  async getUserClaimRewardTime(): Promise<AllocationTime> {\n    const { Masonry, Treasury } = this.contracts;\n    const nextEpochTimestamp = await Masonry.nextEpochPoint(); //in unix timestamp\n    const currentEpoch = await Masonry.epoch();\n    const mason = await Masonry.masons(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const periodInHours = period / 60 / 60; // 6 hours, period is displayed in seconds which is 21600\n    const rewardLockupEpochs = await Masonry.rewardLockupEpochs();\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(rewardLockupEpochs);\n\n    const fromDate = new Date(Date.now());\n    if (targetEpochForClaimUnlock - currentEpoch <= 0) {\n      return { from: fromDate, to: fromDate };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return { from: fromDate, to: toDate };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - currentEpoch - 1;\n      const endDate = moment(toDate)\n        .add(delta * periodInHours, 'hours')\n        .toDate();\n      return { from: fromDate, to: endDate };\n    }\n  }\n\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to unstake\n   * from the masonry\n   * @returns Promise<AllocationTime>\n   */\n  async getUserUnstakeTime(): Promise<AllocationTime> {\n    const { Masonry, Treasury } = this.contracts;\n    const nextEpochTimestamp = await Masonry.nextEpochPoint();\n    const currentEpoch = await Masonry.epoch();\n    const mason = await Masonry.masons(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const PeriodInHours = period / 60 / 60;\n    const withdrawLockupEpochs = await Masonry.withdrawLockupEpochs();\n    const fromDate = new Date(Date.now());\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(withdrawLockupEpochs);\n    const stakedAmount = await this.getStakedSharesOnMasonry();\n    if (currentEpoch <= targetEpochForClaimUnlock && Number(stakedAmount) === 0) {\n      return { from: fromDate, to: fromDate };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return { from: fromDate, to: toDate };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - Number(currentEpoch) - 1;\n      const endDate = moment(toDate)\n        .add(delta * PeriodInHours, 'hours')\n        .toDate();\n      return { from: fromDate, to: endDate };\n    }\n  }\n\n  async watchAssetInMetamask(assetName: string): Promise<boolean> {\n    const { ethereum } = window as any;\n    if (ethereum && ethereum.networkVersion === config.chainId.toString()) {\n      let asset;\n      let assetUrl;\n      if (assetName === 'TOMB') {\n        asset = this.TOMB;\n        assetUrl = 'https://tomb.finance/presskit/tomb_icon_noBG.png';\n      } else if (assetName === 'TSHARE') {\n        asset = this.TSHARE;\n        assetUrl = 'https://tomb.finance/presskit/tshare_icon_noBG.png';\n      } else if (assetName === 'TBOND') {\n        asset = this.TBOND;\n        assetUrl = 'https://tomb.finance/presskit/tbond_icon_noBG.png';\n      }\n      await ethereum.request({\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20',\n          options: {\n            address: asset.address,\n            symbol: asset.symbol,\n            decimals: 18,\n            image: assetUrl,\n          },\n        },\n      });\n    }\n    return true;\n  }\n\n  async provideTombFtmLP(ftmAmount: string, tombAmount: BigNumber): Promise<TransactionResponse> {\n    const { TaxOffice } = this.contracts;\n    let overrides = {\n      value: parseUnits(ftmAmount, 18),\n    };\n    return await TaxOffice.addLiquidityETHTaxFree(tombAmount, tombAmount.mul(992).div(1000), parseUnits(ftmAmount, 18).mul(992).div(1000), overrides);\n  }\n\n  async quoteFromSpooky(tokenAmount: string, tokenName: string): Promise<string> {\n    const { SpookyRouter } = this.contracts;\n    const { _reserve0, _reserve1 } = await this.TOMBWFTM_LP.getReserves();\n    let quote;\n    if (tokenName === 'TOMB') {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve1, _reserve0);\n    } else {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve0, _reserve1);\n    }\n    return (quote / 1e18).toString();\n  }\n\n  /**\n   * @returns an array of the regulation events till the most up to date epoch\n   */\n  async listenForRegulationsEvents(): Promise<any> {\n    const { Treasury } = this.contracts;\n\n    const treasuryDaoFundedFilter = Treasury.filters.DaoFundFunded();\n    const treasuryDevFundedFilter = Treasury.filters.DevFundFunded();\n    const treasuryMasonryFundedFilter = Treasury.filters.MasonryFunded();\n    const boughtBondsFilter = Treasury.filters.BoughtBonds();\n    const redeemBondsFilter = Treasury.filters.RedeemedBonds();\n\n    let epochBlocksRanges: any[] = [];\n    let masonryFundEvents = await Treasury.queryFilter(treasuryMasonryFundedFilter);\n    var events: any[] = [];\n    masonryFundEvents.forEach(function callback(value, index) {\n      events.push({ epoch: index + 1 });\n      events[index].masonryFund = getDisplayBalance(value.args[1]);\n      if (index === 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n      }\n      if (index > 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n        epochBlocksRanges[index - 1].endBlock = value.blockNumber;\n      }\n    });\n\n    epochBlocksRanges.forEach(async (value, index) => {\n      events[index].bondsBought = await this.getBondsWithFilterForPeriod(\n        boughtBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n      events[index].bondsRedeemed = await this.getBondsWithFilterForPeriod(\n        redeemBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n    });\n    let DEVFundEvents = await Treasury.queryFilter(treasuryDevFundedFilter);\n    DEVFundEvents.forEach(function callback(value, index) {\n      events[index].devFund = getDisplayBalance(value.args[1]);\n    });\n    let DAOFundEvents = await Treasury.queryFilter(treasuryDaoFundedFilter);\n    DAOFundEvents.forEach(function callback(value, index) {\n      events[index].daoFund = getDisplayBalance(value.args[1]);\n    });\n    return events;\n  }\n\n  /**\n   * Helper method\n   * @param filter applied on the query to the treasury events\n   * @param from block number\n   * @param to block number\n   * @returns the amount of bonds events emitted based on the filter provided during a specific period\n   */\n  async getBondsWithFilterForPeriod(filter: EventFilter, from: number, to: number): Promise<number> {\n    const { Treasury } = this.contracts;\n    const bondsAmount = await Treasury.queryFilter(filter, from, to);\n    return bondsAmount.length;\n  }\n\n  async estimateZapIn(tokenName: string, lpName: string, amount: string): Promise<number[]> {\n    const { zapper } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n    let estimate;\n    if (tokenName === FTM_TICKER) {\n      estimate = await zapper.estimateZapIn(lpToken.address, SPOOKY_ROUTER_ADDR, parseUnits(amount, 18));\n    } else {\n      const token = tokenName === TOMB_TICKER ? this.TOMB : this.TSHARE;\n      estimate = await zapper.estimateZapInToken(\n        token.address,\n        lpToken.address,\n        SPOOKY_ROUTER_ADDR,\n        parseUnits(amount, 18),\n      );\n    }\n    return [estimate[0] / 1e18, estimate[1] / 1e18];\n  }\n  async zapIn(tokenName: string, lpName: string, amount: string): Promise<TransactionResponse> {\n    const { zapper } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n    if (tokenName === FTM_TICKER) {\n      let overrides = {\n        value: parseUnits(amount, 18),\n      };\n      return await zapper.zapIn(lpToken.address, SPOOKY_ROUTER_ADDR, this.myAccount, overrides);\n    } else {\n      const token = tokenName === TOMB_TICKER ? this.TOMB : this.TSHARE;\n      return await zapper.zapInToken(\n        token.address,\n        parseUnits(amount, 18),\n        lpToken.address,\n        SPOOKY_ROUTER_ADDR,\n        this.myAccount,\n      );\n    }\n  }\n  async swapTBondToTShare(tbondAmount: BigNumber): Promise<TransactionResponse> {\n    const { TShareSwapper } = this.contracts;\n    return await TShareSwapper.swapTBondToTShare(tbondAmount);\n  }\n  async estimateAmountOfTShare(tbondAmount: string): Promise<string> {\n    const { TShareSwapper } = this.contracts;\n    try {\n      const estimateBN = await TShareSwapper.estimateAmountOfTShare(parseUnits(tbondAmount, 18));\n      return getDisplayBalance(estimateBN, 18, 6);\n    } catch (err) {\n      console.error(`Failed to fetch estimate tshare amount: ${err}`);\n    }\n  }\n\n  async getTShareSwapperStat(address: string): Promise<TShareSwapperStat> {\n    const { TShareSwapper } = this.contracts;\n    const tshareBalanceBN = await TShareSwapper.getTShareBalance();\n    const tbondBalanceBN = await TShareSwapper.getTBondBalance(address);\n    // const tombPriceBN = await TShareSwapper.getTombPrice();\n    // const tsharePriceBN = await TShareSwapper.getTSharePrice();\n    const rateTSharePerTombBN = await TShareSwapper.getTShareAmountPerTomb();\n    const tshareBalance = getDisplayBalance(tshareBalanceBN, 18, 5);\n    const tbondBalance = getDisplayBalance(tbondBalanceBN, 18, 5);\n    return {\n      tshareBalance: tshareBalance.toString(),\n      tbondBalance: tbondBalance.toString(),\n      // tombPrice: tombPriceBN.toString(),\n      // tsharePrice: tsharePriceBN.toString(),\n      rateTSharePerTomb: rateTSharePerTombBN.toString(),\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}