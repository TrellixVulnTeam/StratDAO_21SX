{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport allBonds from \"../helpers/bond\";\nconst initialBondArray = allBonds; // Slaps together bond data within the account & bonding states\n\nfunction useBonds() {\n  _s();\n\n  const bondLoading = useSelector(state => state.bonding.loading);\n  const bondState = useSelector(state => state.bonding);\n  const accountBondsState = useSelector(state => state.account.bonds); //@ts-ignore\n\n  const [bonds, setBonds] = useState(initialBondArray);\n  useEffect(() => {\n    let bondDetails;\n    bondDetails = allBonds.flatMap(bond => {\n      if (bondState[bond.name] && bondState[bond.name].bondDiscount) {\n        return Object.assign(bond, bondState[bond.name]); // Keeps the object type\n      }\n\n      return bond;\n    }).flatMap(bond => {\n      if (accountBondsState[bond.name]) {\n        return Object.assign(bond, accountBondsState[bond.name]);\n      }\n\n      return bond;\n    });\n    const mostProfitableBonds = bondDetails.concat().sort((a, b) => {\n      return a[\"bondDiscount\"] > b[\"bondDiscount\"] ? -1 : b[\"bondDiscount\"] > a[\"bondDiscount\"] ? 1 : 0;\n    });\n    setBonds(mostProfitableBonds);\n  }, [bondState, accountBondsState, bondLoading]);\n  return {\n    bonds,\n    loading: bondLoading\n  };\n}\n\n_s(useBonds, \"G1llDxoSE2vKNTC/BqnYfGBO1fU=\", false, function () {\n  return [useSelector, useSelector, useSelector];\n});\n\nexport default useBonds;","map":{"version":3,"sources":["/Users/anthonymann/Desktop/Snowbank DAO/snowbank-frontend/src/hooks/bonds.ts"],"names":["useSelector","useEffect","useState","allBonds","initialBondArray","useBonds","bondLoading","state","bonding","loading","bondState","accountBondsState","account","bonds","setBonds","bondDetails","flatMap","bond","name","bondDiscount","Object","assign","mostProfitableBonds","concat","sort","a","b"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,iBAArB;AASA,MAAMC,gBAAgB,GAAGD,QAAzB,C,CACA;;AACA,SAASE,QAAT,GAAoB;AAAA;;AAChB,QAAMC,WAAW,GAAGN,WAAW,CAAuBO,KAAK,IAAIA,KAAK,CAACC,OAAN,CAAcC,OAA9C,CAA/B;AACA,QAAMC,SAAS,GAAGV,WAAW,CAA0BO,KAAK,IAAIA,KAAK,CAACC,OAAzC,CAA7B;AACA,QAAMG,iBAAiB,GAAGX,WAAW,CAAmDO,KAAK,IAAIA,KAAK,CAACK,OAAN,CAAcC,KAA1E,CAArC,CAHgB,CAIhB;;AACA,QAAM,CAACA,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAiBE,gBAAjB,CAAlC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIc,WAAJ;AACAA,IAAAA,WAAW,GAAGZ,QAAQ,CACjBa,OADS,CACDC,IAAI,IAAI;AACb,UAAIP,SAAS,CAACO,IAAI,CAACC,IAAN,CAAT,IAAwBR,SAAS,CAACO,IAAI,CAACC,IAAN,CAAT,CAAqBC,YAAjD,EAA+D;AAC3D,eAAOC,MAAM,CAACC,MAAP,CAAcJ,IAAd,EAAoBP,SAAS,CAACO,IAAI,CAACC,IAAN,CAA7B,CAAP,CAD2D,CACT;AACrD;;AACD,aAAOD,IAAP;AACH,KANS,EAOTD,OAPS,CAODC,IAAI,IAAI;AACb,UAAIN,iBAAiB,CAACM,IAAI,CAACC,IAAN,CAArB,EAAkC;AAC9B,eAAOE,MAAM,CAACC,MAAP,CAAcJ,IAAd,EAAoBN,iBAAiB,CAACM,IAAI,CAACC,IAAN,CAArC,CAAP;AACH;;AACD,aAAOD,IAAP;AACH,KAZS,CAAd;AAcA,UAAMK,mBAAmB,GAAGP,WAAW,CAACQ,MAAZ,GAAqBC,IAArB,CAA0B,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC5D,aAAOD,CAAC,CAAC,cAAD,CAAD,GAAoBC,CAAC,CAAC,cAAD,CAArB,GAAwC,CAAC,CAAzC,GAA6CA,CAAC,CAAC,cAAD,CAAD,GAAoBD,CAAC,CAAC,cAAD,CAArB,GAAwC,CAAxC,GAA4C,CAAhG;AACH,KAF2B,CAA5B;AAIAX,IAAAA,QAAQ,CAACQ,mBAAD,CAAR;AACH,GArBQ,EAqBN,CAACZ,SAAD,EAAYC,iBAAZ,EAA+BL,WAA/B,CArBM,CAAT;AAuBA,SAAO;AAAEO,IAAAA,KAAF;AAASJ,IAAAA,OAAO,EAAEH;AAAlB,GAAP;AACH;;GA/BQD,Q;UACeL,W,EACFA,W,EACQA,W;;;AA8B9B,eAAeK,QAAf","sourcesContent":["import { useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport allBonds from \"../helpers/bond\";\nimport { IUserBondDetails } from \"../store/slices/account-slice\";\nimport { Bond } from \"../helpers/bond/bond\";\nimport { IBondDetails, IBondSlice } from \"../store/slices/bond-slice\";\nimport { IReduxState } from \"../store/slices/state.interface\";\n\n// Smash all the interfaces together to get the BondData Type\nexport interface IAllBondData extends Bond, IBondDetails, IUserBondDetails {}\n\nconst initialBondArray = allBonds;\n// Slaps together bond data within the account & bonding states\nfunction useBonds() {\n    const bondLoading = useSelector<IReduxState, boolean>(state => state.bonding.loading);\n    const bondState = useSelector<IReduxState, IBondSlice>(state => state.bonding);\n    const accountBondsState = useSelector<IReduxState, { [key: string]: IUserBondDetails }>(state => state.account.bonds);\n    //@ts-ignore\n    const [bonds, setBonds] = useState<IAllBondData[]>(initialBondArray);\n\n    useEffect(() => {\n        let bondDetails: IAllBondData[];\n        bondDetails = allBonds\n            .flatMap(bond => {\n                if (bondState[bond.name] && bondState[bond.name].bondDiscount) {\n                    return Object.assign(bond, bondState[bond.name]); // Keeps the object type\n                }\n                return bond;\n            })\n            .flatMap(bond => {\n                if (accountBondsState[bond.name]) {\n                    return Object.assign(bond, accountBondsState[bond.name]);\n                }\n                return bond;\n            });\n\n        const mostProfitableBonds = bondDetails.concat().sort((a, b) => {\n            return a[\"bondDiscount\"] > b[\"bondDiscount\"] ? -1 : b[\"bondDiscount\"] > a[\"bondDiscount\"] ? 1 : 0;\n        });\n\n        setBonds(mostProfitableBonds);\n    }, [bondState, accountBondsState, bondLoading]);\n\n    return { bonds, loading: bondLoading };\n}\n\nexport default useBonds;\n"]},"metadata":{},"sourceType":"module"}