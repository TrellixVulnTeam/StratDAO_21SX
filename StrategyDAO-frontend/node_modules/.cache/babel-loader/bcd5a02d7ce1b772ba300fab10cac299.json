{"ast":null,"code":"var _jsxFileName = \"/Users/anthonymann/Desktop/Snowbank DAO/snowbank-frontend/src/hooks/web3/web3-context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useContext, useMemo, useCallback } from \"react\";\nimport Web3Modal from \"web3modal\";\nimport { StaticJsonRpcProvider, Web3Provider } from \"@ethersproject/providers\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { getMainnetURI } from \"./helpers\";\nimport { DEFAULD_NETWORK } from \"../../constants\";\nimport { Networks } from \"../../constants\";\nimport { messages } from \"../../constants/messages\";\nimport { useDispatch } from \"react-redux\";\nimport { swithNetwork } from \"../../helpers/switch-network\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Web3Context = /*#__PURE__*/React.createContext(null);\nexport const useWeb3Context = () => {\n  _s();\n\n  const web3Context = useContext(Web3Context);\n\n  if (!web3Context) {\n    throw new Error(\"useWeb3Context() can only be used inside of <Web3ContextProvider />, \" + \"please declare it at a higher level.\");\n  }\n\n  const {\n    onChainProvider\n  } = web3Context;\n  return useMemo(() => {\n    return { ...onChainProvider\n    };\n  }, [web3Context]);\n};\n\n_s(useWeb3Context, \"Xp/Ilap8+ITfpgM9rWPgFupq6w4=\");\n\nexport const useAddress = () => {\n  _s2();\n\n  const {\n    address\n  } = useWeb3Context();\n  return address;\n};\n\n_s2(useAddress, \"pdWcvJNgsqSr1yMsyQQKQtBRW0w=\", false, function () {\n  return [useWeb3Context];\n});\n\nexport const Web3ContextProvider = _ref => {\n  _s3();\n\n  let {\n    children\n  } = _ref;\n  const dispatch = useDispatch();\n  const [connected, setConnected] = useState(false);\n  const [chainID, setChainID] = useState(DEFAULD_NETWORK);\n  const [providerChainID, setProviderChainID] = useState(DEFAULD_NETWORK);\n  const [address, setAddress] = useState(\"\");\n  const [uri, setUri] = useState(getMainnetURI());\n  const [provider, setProvider] = useState(new StaticJsonRpcProvider(uri));\n  const [web3Modal] = useState(new Web3Modal({\n    cacheProvider: true,\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider,\n        options: {\n          rpc: {\n            [Networks.AVAX]: getMainnetURI()\n          }\n        }\n      }\n    }\n  }));\n\n  const hasCachedProvider = () => {\n    if (!web3Modal) return false;\n    if (!web3Modal.cachedProvider) return false;\n    return true;\n  };\n\n  const _initListeners = useCallback(rawProvider => {\n    if (!rawProvider.on) {\n      return;\n    }\n\n    rawProvider.on(\"accountsChanged\", () => setTimeout(() => window.location.reload(), 1));\n    rawProvider.on(\"chainChanged\", async chain => {\n      changeNetwork(chain);\n    });\n    rawProvider.on(\"network\", (_newNetwork, oldNetwork) => {\n      if (!oldNetwork) return;\n      window.location.reload();\n    });\n  }, [provider]);\n\n  const changeNetwork = async otherChainID => {\n    const network = Number(otherChainID);\n    setProviderChainID(network);\n  };\n\n  const connect = useCallback(async () => {\n    const rawProvider = await web3Modal.connect();\n\n    _initListeners(rawProvider);\n\n    const connectedProvider = new Web3Provider(rawProvider, \"any\");\n    const chainId = await connectedProvider.getNetwork().then(network => Number(network.chainId));\n    const connectedAddress = await connectedProvider.getSigner().getAddress();\n    setAddress(connectedAddress);\n    setProviderChainID(chainId);\n\n    if (chainId === Networks.AVAX) {\n      setProvider(connectedProvider);\n    }\n\n    setConnected(true);\n    return connectedProvider;\n  }, [provider, web3Modal, connected]);\n\n  const checkWrongNetwork = async () => {\n    if (providerChainID !== DEFAULD_NETWORK) {\n      const shouldSwitch = window.confirm(messages.switch_to_avalanche);\n\n      if (shouldSwitch) {\n        await swithNetwork();\n        window.location.reload();\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  const disconnect = useCallback(async () => {\n    web3Modal.clearCachedProvider();\n    setConnected(false);\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  }, [provider, web3Modal, connected]);\n  const onChainProvider = useMemo(() => ({\n    connect,\n    disconnect,\n    hasCachedProvider,\n    provider,\n    connected,\n    address,\n    chainID,\n    web3Modal,\n    providerChainID,\n    checkWrongNetwork\n  }), [connect, disconnect, hasCachedProvider, provider, connected, address, chainID, web3Modal, providerChainID]); //@ts-ignore\n\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: {\n      onChainProvider\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 12\n  }, this);\n};\n\n_s3(Web3ContextProvider, \"K412mRuDO39k8005/9/P5Oi1sEk=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Web3ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Web3ContextProvider\");","map":{"version":3,"sources":["/Users/anthonymann/Desktop/Snowbank DAO/snowbank-frontend/src/hooks/web3/web3-context.tsx"],"names":["React","useState","useContext","useMemo","useCallback","Web3Modal","StaticJsonRpcProvider","Web3Provider","WalletConnectProvider","getMainnetURI","DEFAULD_NETWORK","Networks","messages","useDispatch","swithNetwork","Web3Context","createContext","useWeb3Context","web3Context","Error","onChainProvider","useAddress","address","Web3ContextProvider","children","dispatch","connected","setConnected","chainID","setChainID","providerChainID","setProviderChainID","setAddress","uri","setUri","provider","setProvider","web3Modal","cacheProvider","providerOptions","walletconnect","package","options","rpc","AVAX","hasCachedProvider","cachedProvider","_initListeners","rawProvider","on","setTimeout","window","location","reload","chain","changeNetwork","_newNetwork","oldNetwork","otherChainID","network","Number","connect","connectedProvider","chainId","getNetwork","then","connectedAddress","getSigner","getAddress","checkWrongNetwork","shouldSwitch","confirm","switch_to_avalanche","disconnect","clearCachedProvider"],"mappings":"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","sourcesContent":["import React, { useState, ReactElement, useContext, useMemo, useCallback } from \"react\";\nimport Web3Modal from \"web3modal\";\nimport { StaticJsonRpcProvider, JsonRpcProvider, Web3Provider } from \"@ethersproject/providers\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { getMainnetURI } from \"./helpers\";\nimport { DEFAULD_NETWORK } from \"../../constants\";\nimport { Networks } from \"../../constants\";\nimport { messages } from \"../../constants/messages\";\nimport { useDispatch } from \"react-redux\";\nimport { swithNetwork } from \"../../helpers/switch-network\";\n\ntype onChainProvider = {\n    connect: () => Promise<Web3Provider>;\n    disconnect: () => void;\n    checkWrongNetwork: () => Promise<boolean>;\n    provider: JsonRpcProvider;\n    address: string;\n    connected: Boolean;\n    web3Modal: Web3Modal;\n    chainID: number;\n    web3?: any;\n    providerChainID: number;\n    hasCachedProvider: () => boolean;\n};\n\nexport type Web3ContextData = {\n    onChainProvider: onChainProvider;\n} | null;\n\nconst Web3Context = React.createContext<Web3ContextData>(null);\n\nexport const useWeb3Context = () => {\n    const web3Context = useContext(Web3Context);\n    if (!web3Context) {\n        throw new Error(\"useWeb3Context() can only be used inside of <Web3ContextProvider />, \" + \"please declare it at a higher level.\");\n    }\n    const { onChainProvider } = web3Context;\n    return useMemo(() => {\n        return { ...onChainProvider };\n    }, [web3Context]);\n};\n\nexport const useAddress = () => {\n    const { address } = useWeb3Context();\n    return address;\n};\n\nexport const Web3ContextProvider: React.FC<{ children: ReactElement }> = ({ children }) => {\n    const dispatch = useDispatch();\n\n    const [connected, setConnected] = useState(false);\n    const [chainID, setChainID] = useState(DEFAULD_NETWORK);\n    const [providerChainID, setProviderChainID] = useState(DEFAULD_NETWORK);\n    const [address, setAddress] = useState(\"\");\n\n    const [uri, setUri] = useState(getMainnetURI());\n    const [provider, setProvider] = useState<JsonRpcProvider>(new StaticJsonRpcProvider(uri));\n\n    const [web3Modal] = useState<Web3Modal>(\n        new Web3Modal({\n            cacheProvider: true,\n            providerOptions: {\n                walletconnect: {\n                    package: WalletConnectProvider,\n                    options: {\n                        rpc: {\n                            [Networks.AVAX]: getMainnetURI(),\n                        },\n                    },\n                },\n            },\n        }),\n    );\n\n    const hasCachedProvider = (): boolean => {\n        if (!web3Modal) return false;\n        if (!web3Modal.cachedProvider) return false;\n        return true;\n    };\n\n    const _initListeners = useCallback(\n        (rawProvider: JsonRpcProvider) => {\n            if (!rawProvider.on) {\n                return;\n            }\n\n            rawProvider.on(\"accountsChanged\", () => setTimeout(() => window.location.reload(), 1));\n\n            rawProvider.on(\"chainChanged\", async (chain: number) => {\n                changeNetwork(chain);\n            });\n\n            rawProvider.on(\"network\", (_newNetwork, oldNetwork) => {\n                if (!oldNetwork) return;\n                window.location.reload();\n            });\n        },\n        [provider],\n    );\n\n    const changeNetwork = async (otherChainID: number) => {\n        const network = Number(otherChainID);\n\n        setProviderChainID(network);\n    };\n\n    const connect = useCallback(async () => {\n        const rawProvider = await web3Modal.connect();\n\n        _initListeners(rawProvider);\n\n        const connectedProvider = new Web3Provider(rawProvider, \"any\");\n\n        const chainId = await connectedProvider.getNetwork().then(network => Number(network.chainId));\n        const connectedAddress = await connectedProvider.getSigner().getAddress();\n\n        setAddress(connectedAddress);\n\n        setProviderChainID(chainId);\n\n        if (chainId === Networks.AVAX) {\n            setProvider(connectedProvider);\n        }\n\n        setConnected(true);\n\n        return connectedProvider;\n    }, [provider, web3Modal, connected]);\n\n    const checkWrongNetwork = async (): Promise<boolean> => {\n        if (providerChainID !== DEFAULD_NETWORK) {\n            const shouldSwitch = window.confirm(messages.switch_to_avalanche);\n            if (shouldSwitch) {\n                await swithNetwork();\n                window.location.reload();\n            }\n            return true;\n        }\n\n        return false;\n    };\n\n    const disconnect = useCallback(async () => {\n        web3Modal.clearCachedProvider();\n        setConnected(false);\n\n        setTimeout(() => {\n            window.location.reload();\n        }, 1);\n    }, [provider, web3Modal, connected]);\n\n    const onChainProvider = useMemo(\n        () => ({\n            connect,\n            disconnect,\n            hasCachedProvider,\n            provider,\n            connected,\n            address,\n            chainID,\n            web3Modal,\n            providerChainID,\n            checkWrongNetwork,\n        }),\n        [connect, disconnect, hasCachedProvider, provider, connected, address, chainID, web3Modal, providerChainID],\n    );\n    //@ts-ignore\n    return <Web3Context.Provider value={{ onChainProvider }}>{children}</Web3Context.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}