{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport allTokens from \"../helpers/tokens\";\nconst initialTokenArray = allTokens;\n\nfunction useTokens() {\n  _s();\n\n  const accountLoading = useSelector(state => state.account.loading);\n  const accountTokensState = useSelector(state => state.account.tokens); //@ts-ignore\n\n  const [tokens, setTokens] = useState(initialTokenArray);\n  useEffect(() => {\n    let tokenDetails; //@ts-ignore\n\n    tokenDetails = allTokens.flatMap(token => {\n      if (accountTokensState[token.name]) {\n        return Object.assign(token, accountTokensState[token.name]);\n      }\n\n      return token;\n    });\n    const mostProfitableBonds = tokenDetails.concat().sort((a, b) => {\n      return a[\"balance\"] > b[\"balance\"] ? -1 : b[\"balance\"] > a[\"balance\"] ? 1 : 0;\n    });\n    setTokens(mostProfitableBonds);\n  }, [accountTokensState, accountLoading]);\n  return {\n    tokens,\n    loading: accountLoading\n  };\n}\n\n_s(useTokens, \"CWbCjQR14evzafCNWYkzwPQOFeg=\", false, function () {\n  return [useSelector, useSelector];\n});\n\nexport default useTokens;","map":{"version":3,"sources":["/Users/anthonymann/Desktop/Snowbank DAO/snowbank-frontend/src/hooks/tokens.ts"],"names":["useSelector","useEffect","useState","allTokens","initialTokenArray","useTokens","accountLoading","state","account","loading","accountTokensState","tokens","setTokens","tokenDetails","flatMap","token","name","Object","assign","mostProfitableBonds","concat","sort","a","b"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AAQA,MAAMC,iBAAiB,GAAGD,SAA1B;;AAEA,SAASE,SAAT,GAAqB;AAAA;;AACjB,QAAMC,cAAc,GAAGN,WAAW,CAAuBO,KAAK,IAAIA,KAAK,CAACC,OAAN,CAAcC,OAA9C,CAAlC;AACA,QAAMC,kBAAkB,GAAGV,WAAW,CAAoDO,KAAK,IAAIA,KAAK,CAACC,OAAN,CAAcG,MAA3E,CAAtC,CAFiB,CAGjB;;AACA,QAAM,CAACA,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAkBE,iBAAlB,CAApC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIY,YAAJ,CADY,CAEZ;;AACAA,IAAAA,YAAY,GAAGV,SAAS,CAACW,OAAV,CAAkBC,KAAK,IAAI;AACtC,UAAIL,kBAAkB,CAACK,KAAK,CAACC,IAAP,CAAtB,EAAoC;AAChC,eAAOC,MAAM,CAACC,MAAP,CAAcH,KAAd,EAAqBL,kBAAkB,CAACK,KAAK,CAACC,IAAP,CAAvC,CAAP;AACH;;AACD,aAAOD,KAAP;AACH,KALc,CAAf;AAOA,UAAMI,mBAAmB,GAAGN,YAAY,CAACO,MAAb,GAAsBC,IAAtB,CAA2B,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC7D,aAAOD,CAAC,CAAC,SAAD,CAAD,GAAeC,CAAC,CAAC,SAAD,CAAhB,GAA8B,CAAC,CAA/B,GAAmCA,CAAC,CAAC,SAAD,CAAD,GAAeD,CAAC,CAAC,SAAD,CAAhB,GAA8B,CAA9B,GAAkC,CAA5E;AACH,KAF2B,CAA5B;AAIAV,IAAAA,SAAS,CAACO,mBAAD,CAAT;AACH,GAfQ,EAeN,CAACT,kBAAD,EAAqBJ,cAArB,CAfM,CAAT;AAiBA,SAAO;AAAEK,IAAAA,MAAF;AAAUF,IAAAA,OAAO,EAAEH;AAAnB,GAAP;AACH;;GAxBQD,S;UACkBL,W,EACIA,W;;;AAwB/B,eAAeK,SAAf","sourcesContent":["import { useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport allTokens from \"../helpers/tokens\";\nimport { IUserTokenDetails } from \"../store/slices/account-slice\";\nimport { IReduxState } from \"../store/slices/state.interface\";\nimport { IToken } from \"../helpers/tokens\";\n\n// Smash all the interfaces together to get the BondData Type\nexport interface IAllTokenData extends IToken, IUserTokenDetails {}\n\nconst initialTokenArray = allTokens;\n\nfunction useTokens() {\n    const accountLoading = useSelector<IReduxState, boolean>(state => state.account.loading);\n    const accountTokensState = useSelector<IReduxState, { [key: string]: IUserTokenDetails }>(state => state.account.tokens);\n    //@ts-ignore\n    const [tokens, setTokens] = useState<IAllTokenData[]>(initialTokenArray);\n\n    useEffect(() => {\n        let tokenDetails: IAllTokenData[];\n        //@ts-ignore\n        tokenDetails = allTokens.flatMap(token => {\n            if (accountTokensState[token.name]) {\n                return Object.assign(token, accountTokensState[token.name]);\n            }\n            return token;\n        });\n\n        const mostProfitableBonds = tokenDetails.concat().sort((a, b) => {\n            return a[\"balance\"] > b[\"balance\"] ? -1 : b[\"balance\"] > a[\"balance\"] ? 1 : 0;\n        });\n\n        setTokens(mostProfitableBonds);\n    }, [accountTokensState, accountLoading]);\n\n    return { tokens, loading: accountLoading };\n}\n\nexport default useTokens;\n"]},"metadata":{},"sourceType":"module"}