{"ast":null,"code":"import { TOKEN_DECIMALS } from \"../../../constants\";\nimport \"./snowbank-menu.scss\";\nimport { getTokenUrl } from \"../../../helpers\";\n\nconst addTokenToWallet = (tokenSymbol, tokenAddress) => async () => {\n  const tokenImage = getTokenUrl(tokenSymbol.toLowerCase());\n\n  if (window.ethereum) {\n    try {\n      await window.ethereum.request({\n        method: \"wallet_watchAsset\",\n        params: {\n          type: \"ERC20\",\n          options: {\n            address: tokenAddress,\n            symbol: tokenSymbol,\n            decimals: TOKEN_DECIMALS,\n            image: tokenImage\n          }\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};\n/**\nfunction StrategyDAOMenu() {\n    const { t } = useTranslation();\n\n    const [anchorEl, setAnchorEl] = useState(null);\n    const isEthereumAPIAvailable = window.ethereum;\n\n    const networkID = useSelector<IReduxState, number>(state => {\n        return (state.app && state.app.networkID) || DEFAULD_NETWORK;\n    });\n\n    const addresses = getAddresses(networkID);\n\n    const SSB_ADDRESS = addresses.SSB_ADDRESS;\n    const SB_ADDRESS = addresses.SB_ADDRESS;\n\n    const handleClick = (event: any) => {\n        setAnchorEl(anchorEl ? null : event.currentTarget);\n    };\n\n    const open = Boolean(anchorEl);\n\n    return (\n        <div className=\"sb-menu-root\" onMouseEnter={e => handleClick(e)} onMouseLeave={e => handleClick(e)}>\n            <div className=\"sb-menu-btn\">\n                <p>{t(\"Buy $STRAT\")}</p>\n            </div>\n\n            <Popper className=\"sb-menu-popper\" open={open} anchorEl={anchorEl} transition>\n                {({ TransitionProps }) => (\n                    <Fade {...TransitionProps} timeout={200}>\n                        <div className=\"tooltip\">\n                            <Link\n                                className=\"tooltip-item\"\n                                href={`https://www.traderjoexyz.com/#/trade?inputCurrency=0x130966628846bfd36ff31a822705796e8cb8c18d&outputCurrency=${SB_ADDRESS}`}\n                                target=\"_blank\"\n                            >\n                                <p>{t(\"Buy On TraderJoeXYZ\")}</p>\n                            </Link>\n\n                            {isEthereumAPIAvailable && (\n                                <div className=\"add-tokens\">\n                                    <div className=\"divider\" />\n                                    <p className=\"add-tokens-title\">{t(\"AddTokenToWallet\")}</p>\n                                    <div className=\"divider\" />\n                                    <div className=\"tooltip-item\" onClick={addTokenToWallet(\"STRAT\", SB_ADDRESS)}>\n                                        <p>↑ STRAT</p>\n                                    </div>\n                                    <div className=\"tooltip-item\" onClick={addTokenToWallet(\"sSTRAT\", SSB_ADDRESS)}>\n                                        <p>↑ sSTRAT</p>\n                                    </div>\n                                </div>\n                            )}\n                        </div>\n                    </Fade>\n                )}\n            </Popper>\n        </div>\n    );\n}\n\nexport default StrategyDAOMenu;\n*/","map":{"version":3,"sources":["/Users/anthonymann/Desktop/Snowbank DAO/snowbank-frontend/src/components/Header/snowbank-menu/index.tsx"],"names":["TOKEN_DECIMALS","getTokenUrl","addTokenToWallet","tokenSymbol","tokenAddress","tokenImage","toLowerCase","window","ethereum","request","method","params","type","options","address","symbol","decimals","image","error","console","log"],"mappings":"AACA,SAAuBA,cAAvB,QAA8D,oBAA9D;AAGA,OAAO,sBAAP;AAEA,SAASC,WAAT,QAA4B,kBAA5B;;AAIA,MAAMC,gBAAgB,GAAG,CAACC,WAAD,EAAsBC,YAAtB,KAA+C,YAAY;AAChF,QAAMC,UAAU,GAAGJ,WAAW,CAACE,WAAW,CAACG,WAAZ,EAAD,CAA9B;;AAEA,MAAIC,MAAM,CAACC,QAAX,EAAqB;AACjB,QAAI;AACA,YAAMD,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAC1BC,QAAAA,MAAM,EAAE,mBADkB;AAE1BC,QAAAA,MAAM,EAAE;AACJC,UAAAA,IAAI,EAAE,OADF;AAEJC,UAAAA,OAAO,EAAE;AACLC,YAAAA,OAAO,EAAEV,YADJ;AAELW,YAAAA,MAAM,EAAEZ,WAFH;AAGLa,YAAAA,QAAQ,EAAEhB,cAHL;AAILiB,YAAAA,KAAK,EAAEZ;AAJF;AAFL;AAFkB,OAAxB,CAAN;AAYH,KAbD,CAaE,OAAOa,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ;AACJ,CArBD;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useState } from \"react\";\nimport { getAddresses, TOKEN_DECIMALS, DEFAULD_NETWORK } from \"../../../constants\";\nimport { useSelector } from \"react-redux\";\nimport { Link, Fade, Popper } from \"@material-ui/core\";\nimport \"./snowbank-menu.scss\";\nimport { IReduxState } from \"../../../store/slices/state.interface\";\nimport { getTokenUrl } from \"../../../helpers\";\n\nimport { useTranslation } from \"react-i18next\";\n\nconst addTokenToWallet = (tokenSymbol: string, tokenAddress: string) => async () => {\n    const tokenImage = getTokenUrl(tokenSymbol.toLowerCase());\n\n    if (window.ethereum) {\n        try {\n            await window.ethereum.request({\n                method: \"wallet_watchAsset\",\n                params: {\n                    type: \"ERC20\",\n                    options: {\n                        address: tokenAddress,\n                        symbol: tokenSymbol,\n                        decimals: TOKEN_DECIMALS,\n                        image: tokenImage,\n                    },\n                },\n            });\n        } catch (error) {\n            console.log(error);\n        }\n    }\n};\n/**\nfunction StrategyDAOMenu() {\n    const { t } = useTranslation();\n\n    const [anchorEl, setAnchorEl] = useState(null);\n    const isEthereumAPIAvailable = window.ethereum;\n\n    const networkID = useSelector<IReduxState, number>(state => {\n        return (state.app && state.app.networkID) || DEFAULD_NETWORK;\n    });\n\n    const addresses = getAddresses(networkID);\n\n    const SSB_ADDRESS = addresses.SSB_ADDRESS;\n    const SB_ADDRESS = addresses.SB_ADDRESS;\n\n    const handleClick = (event: any) => {\n        setAnchorEl(anchorEl ? null : event.currentTarget);\n    };\n\n    const open = Boolean(anchorEl);\n\n    return (\n        <div className=\"sb-menu-root\" onMouseEnter={e => handleClick(e)} onMouseLeave={e => handleClick(e)}>\n            <div className=\"sb-menu-btn\">\n                <p>{t(\"Buy $STRAT\")}</p>\n            </div>\n\n            <Popper className=\"sb-menu-popper\" open={open} anchorEl={anchorEl} transition>\n                {({ TransitionProps }) => (\n                    <Fade {...TransitionProps} timeout={200}>\n                        <div className=\"tooltip\">\n                            <Link\n                                className=\"tooltip-item\"\n                                href={`https://www.traderjoexyz.com/#/trade?inputCurrency=0x130966628846bfd36ff31a822705796e8cb8c18d&outputCurrency=${SB_ADDRESS}`}\n                                target=\"_blank\"\n                            >\n                                <p>{t(\"Buy On TraderJoeXYZ\")}</p>\n                            </Link>\n\n                            {isEthereumAPIAvailable && (\n                                <div className=\"add-tokens\">\n                                    <div className=\"divider\" />\n                                    <p className=\"add-tokens-title\">{t(\"AddTokenToWallet\")}</p>\n                                    <div className=\"divider\" />\n                                    <div className=\"tooltip-item\" onClick={addTokenToWallet(\"STRAT\", SB_ADDRESS)}>\n                                        <p>↑ STRAT</p>\n                                    </div>\n                                    <div className=\"tooltip-item\" onClick={addTokenToWallet(\"sSTRAT\", SSB_ADDRESS)}>\n                                        <p>↑ sSTRAT</p>\n                                    </div>\n                                </div>\n                            )}\n                        </div>\n                    </Fade>\n                )}\n            </Popper>\n        </div>\n    );\n}\n\nexport default StrategyDAOMenu;\n*/\n"]},"metadata":{},"sourceType":"module"}