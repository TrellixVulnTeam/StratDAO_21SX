{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { ethers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\nconst useENS = address => {\n  _s();\n\n  const [ensName, setENSName] = useState(null);\n  useEffect(() => {\n    const resolveENS = async () => {\n      if (ethers.utils.isAddress(address)) {\n        const provider = new ethers.providers.JsonRpcProvider(\"https://cloudflare-eth.com\");\n        const ensName = await provider.lookupAddress(address);\n        setENSName(ensName);\n      }\n    };\n\n    resolveENS();\n  }, [address]);\n  return {\n    ensName\n  };\n};\n\n_s(useENS, \"pbqzLyJeRkZLKNpaOV+lmZtg28g=\");\n\nexport default useENS;","map":{"version":3,"sources":["/Users/anthonymann/Desktop/Snowbank DAO/snowbank-frontend/src/hooks/useENS.ts"],"names":["ethers","useEffect","useState","useENS","address","ensName","setENSName","resolveENS","utils","isAddress","provider","providers","JsonRpcProvider","lookupAddress"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,MAAM,GAAIC,OAAD,IAAqB;AAAA;;AAChC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAgB,IAAhB,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMM,UAAU,GAAG,YAAY;AAC3B,UAAIP,MAAM,CAACQ,KAAP,CAAaC,SAAb,CAAuBL,OAAvB,CAAJ,EAAqC;AACjC,cAAMM,QAAQ,GAAG,IAAIV,MAAM,CAACW,SAAP,CAAiBC,eAArB,CAAqC,4BAArC,CAAjB;AACA,cAAMP,OAAO,GAAG,MAAMK,QAAQ,CAACG,aAAT,CAAuBT,OAAvB,CAAtB;AACAE,QAAAA,UAAU,CAACD,OAAD,CAAV;AACH;AACJ,KAND;;AAOAE,IAAAA,UAAU;AACb,GATQ,EASN,CAACH,OAAD,CATM,CAAT;AAWA,SAAO;AAAEC,IAAAA;AAAF,GAAP;AACH,CAfD;;GAAMF,M;;AAiBN,eAAeA,MAAf","sourcesContent":["import { ethers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\nconst useENS = (address: string) => {\n    const [ensName, setENSName] = useState<string | null>(null);\n\n    useEffect(() => {\n        const resolveENS = async () => {\n            if (ethers.utils.isAddress(address)) {\n                const provider = new ethers.providers.JsonRpcProvider(\"https://cloudflare-eth.com\");\n                const ensName = await provider.lookupAddress(address);\n                setENSName(ensName);\n            }\n        };\n        resolveENS();\n    }, [address]);\n\n    return { ensName };\n};\n\nexport default useENS;\n"]},"metadata":{},"sourceType":"module"}