{"ast":null,"code":"import { getExponentialParts, isExponential } from './helpers';\n/**\n * Converts exponential notation to a human readable string\n * @param {number|string|Array} num - number or array of its parts\n * @return {string}\n */\n\nexport default function fromExponential(num) {\n  const eParts = getExponentialParts(num);\n\n  if (!isExponential(eParts)) {\n    return eParts[0];\n  }\n\n  const sign = eParts[0][0] === '-' ? '-' : '';\n  const digits = eParts[0].replace(/^-/, '');\n  const digitsParts = digits.split('.');\n  const wholeDigits = digitsParts[0];\n  const fractionDigits = digitsParts[1] || '';\n  let e = Number(eParts[1]);\n\n  if (e === 0) {\n    return `${sign + wholeDigits}.${fractionDigits}`;\n  } else if (e < 0) {\n    // move dot to the left\n    const countWholeAfterTransform = wholeDigits.length + e;\n\n    if (countWholeAfterTransform > 0) {\n      // transform whole to fraction\n      const wholeDigitsAfterTransform = wholeDigits.substr(0, countWholeAfterTransform);\n      const wholeDigitsTransformedToFraction = wholeDigits.substr(countWholeAfterTransform);\n      return `${sign + wholeDigitsAfterTransform}.${wholeDigitsTransformedToFraction}${fractionDigits}`;\n    } else {\n      // not enough whole digits: prepend with fractional zeros\n      // first e goes to dotted zero\n      let zeros = '0.';\n      e = countWholeAfterTransform;\n\n      while (e) {\n        zeros += '0';\n        e += 1;\n      }\n\n      return sign + zeros + wholeDigits + fractionDigits;\n    }\n  } else {\n    // move dot to the right\n    const countFractionAfterTransform = fractionDigits.length - e;\n\n    if (countFractionAfterTransform > 0) {\n      // transform fraction to whole\n      // countTransformedFractionToWhole = e\n      const fractionDigitsAfterTransform = fractionDigits.substr(e);\n      const fractionDigitsTransformedToWhole = fractionDigits.substr(0, e);\n      return `${sign + wholeDigits + fractionDigitsTransformedToWhole}.${fractionDigitsAfterTransform}`;\n    } else {\n      // not enough fractions: append whole zeros\n      let zerosCount = -countFractionAfterTransform;\n      let zeros = '';\n\n      while (zerosCount) {\n        zeros += '0';\n        zerosCount -= 1;\n      }\n\n      return sign + wholeDigits + fractionDigits + zeros;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/anthonymann/Desktop/Snowbank DAO/snowbank-frontend/node_modules/from-exponential/src/index.js"],"names":["getExponentialParts","isExponential","fromExponential","num","eParts","sign","digits","replace","digitsParts","split","wholeDigits","fractionDigits","e","Number","countWholeAfterTransform","length","wholeDigitsAfterTransform","substr","wholeDigitsTransformedToFraction","zeros","countFractionAfterTransform","fractionDigitsAfterTransform","fractionDigitsTransformedToWhole","zerosCount"],"mappings":"AAAA,SAAQA,mBAAR,EAA6BC,aAA7B,QAAiD,WAAjD;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,eAAT,CAAyBC,GAAzB,EAA8B;AACzC,QAAMC,MAAM,GAAGJ,mBAAmB,CAACG,GAAD,CAAlC;;AACA,MAAI,CAACF,aAAa,CAACG,MAAD,CAAlB,EAA4B;AACxB,WAAOA,MAAM,CAAC,CAAD,CAAb;AACH;;AAED,QAAMC,IAAI,GAAGD,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,MAAiB,GAAjB,GAAuB,GAAvB,GAA6B,EAA1C;AACA,QAAME,MAAM,GAAGF,MAAM,CAAC,CAAD,CAAN,CAAUG,OAAV,CAAkB,IAAlB,EAAwB,EAAxB,CAAf;AACA,QAAMC,WAAW,GAAGF,MAAM,CAACG,KAAP,CAAa,GAAb,CAApB;AACA,QAAMC,WAAW,GAAGF,WAAW,CAAC,CAAD,CAA/B;AACA,QAAMG,cAAc,GAAGH,WAAW,CAAC,CAAD,CAAX,IAAkB,EAAzC;AACA,MAAII,CAAC,GAAGC,MAAM,CAACT,MAAM,CAAC,CAAD,CAAP,CAAd;;AAEA,MAAIQ,CAAC,KAAK,CAAV,EAAa;AACT,WAAQ,GAAEP,IAAI,GAAGK,WAAY,IAAGC,cAAe,EAA/C;AACH,GAFD,MAEO,IAAIC,CAAC,GAAG,CAAR,EAAW;AACd;AACA,UAAME,wBAAwB,GAAGJ,WAAW,CAACK,MAAZ,GAAqBH,CAAtD;;AACA,QAAIE,wBAAwB,GAAG,CAA/B,EAAkC;AAC9B;AACA,YAAME,yBAAyB,GAAGN,WAAW,CAACO,MAAZ,CAAmB,CAAnB,EAAsBH,wBAAtB,CAAlC;AACA,YAAMI,gCAAgC,GAAGR,WAAW,CAACO,MAAZ,CAAmBH,wBAAnB,CAAzC;AACA,aAAQ,GAAET,IAAI,GAAGW,yBAA0B,IAAGE,gCAAiC,GAAEP,cAAe,EAAhG;AACH,KALD,MAKO;AACH;AAEA;AACA,UAAIQ,KAAK,GAAG,IAAZ;AACAP,MAAAA,CAAC,GAAGE,wBAAJ;;AACA,aAAOF,CAAP,EAAU;AACNO,QAAAA,KAAK,IAAI,GAAT;AACAP,QAAAA,CAAC,IAAI,CAAL;AACH;;AACD,aAAOP,IAAI,GAAGc,KAAP,GAAeT,WAAf,GAA6BC,cAApC;AACH;AACJ,GApBM,MAoBA;AACH;AACA,UAAMS,2BAA2B,GAAGT,cAAc,CAACI,MAAf,GAAwBH,CAA5D;;AACA,QAAIQ,2BAA2B,GAAG,CAAlC,EAAqC;AACjC;AACA;AACA,YAAMC,4BAA4B,GAAGV,cAAc,CAACM,MAAf,CAAsBL,CAAtB,CAArC;AACA,YAAMU,gCAAgC,GAAGX,cAAc,CAACM,MAAf,CAAsB,CAAtB,EAAyBL,CAAzB,CAAzC;AACA,aAAQ,GAAEP,IAAI,GAAGK,WAAP,GAAqBY,gCAAiC,IAAGD,4BAA6B,EAAhG;AACH,KAND,MAMO;AACH;AACA,UAAIE,UAAU,GAAG,CAACH,2BAAlB;AACA,UAAID,KAAK,GAAG,EAAZ;;AACA,aAAOI,UAAP,EAAmB;AACfJ,QAAAA,KAAK,IAAI,GAAT;AACAI,QAAAA,UAAU,IAAI,CAAd;AACH;;AACD,aAAOlB,IAAI,GAAGK,WAAP,GAAqBC,cAArB,GAAsCQ,KAA7C;AACH;AACJ;AACJ","sourcesContent":["import {getExponentialParts, isExponential} from './helpers';\n\n/**\n * Converts exponential notation to a human readable string\n * @param {number|string|Array} num - number or array of its parts\n * @return {string}\n */\nexport default function fromExponential(num) {\n    const eParts = getExponentialParts(num);\n    if (!isExponential(eParts)) {\n        return eParts[0];\n    }\n\n    const sign = eParts[0][0] === '-' ? '-' : '';\n    const digits = eParts[0].replace(/^-/, '');\n    const digitsParts = digits.split('.');\n    const wholeDigits = digitsParts[0];\n    const fractionDigits = digitsParts[1] || '';\n    let e = Number(eParts[1]);\n\n    if (e === 0) {\n        return `${sign + wholeDigits}.${fractionDigits}`;\n    } else if (e < 0) {\n        // move dot to the left\n        const countWholeAfterTransform = wholeDigits.length + e;\n        if (countWholeAfterTransform > 0) {\n            // transform whole to fraction\n            const wholeDigitsAfterTransform = wholeDigits.substr(0, countWholeAfterTransform);\n            const wholeDigitsTransformedToFraction = wholeDigits.substr(countWholeAfterTransform);\n            return `${sign + wholeDigitsAfterTransform}.${wholeDigitsTransformedToFraction}${fractionDigits}`;\n        } else {\n            // not enough whole digits: prepend with fractional zeros\n\n            // first e goes to dotted zero\n            let zeros = '0.';\n            e = countWholeAfterTransform;\n            while (e) {\n                zeros += '0';\n                e += 1;\n            }\n            return sign + zeros + wholeDigits + fractionDigits;\n        }\n    } else {\n        // move dot to the right\n        const countFractionAfterTransform = fractionDigits.length - e;\n        if (countFractionAfterTransform > 0) {\n            // transform fraction to whole\n            // countTransformedFractionToWhole = e\n            const fractionDigitsAfterTransform = fractionDigits.substr(e);\n            const fractionDigitsTransformedToWhole = fractionDigits.substr(0, e);\n            return `${sign + wholeDigits + fractionDigitsTransformedToWhole}.${fractionDigitsAfterTransform}`;\n        } else {\n            // not enough fractions: append whole zeros\n            let zerosCount = -countFractionAfterTransform;\n            let zeros = '';\n            while (zerosCount) {\n                zeros += '0';\n                zerosCount -= 1;\n            }\n            return sign + wholeDigits + fractionDigits + zeros;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}