{"ast":null,"code":"import { Networks } from \"./blockchain\";\nconst AVAX_MAINNET = {\n  DAO_ADDRESS: \"0x561c56b6ea927c157A9F51fCcCfa50B777c1EA7C\",\n  SSB_ADDRESS: \"0xE9Eb40d52CE4744322204d4a29Af63C30f0260a4\",\n  WSSB_ADDRESS: \"0x31C4c046EFAD4B04b823a919CC0bDd0f663c87d4\",\n  SB_ADDRESS: \"0x7d1232b90d3f809a54eeaeebc639c62df8a8942f\",\n  MIM_ADDRESS: \"0x130966628846BFd36ff31a822705796e8cb8C18D\",\n  STAKING_ADDRESS: \"0x85784d5e2CCae89Bcb39EbF0ac6Cdc93d42d99AD\",\n  STAKING_HELPER_ADDRESS: \"0x3d371d925Db78F8e46130AF95756789ecE6387ce\",\n  SB_BONDING_CALC_ADDRESS: \"0xf1AC1eD0Ef7F61223df64e52A6E6E1d6Ca6f992b\",\n  TREASURY_ADDRESS: \"0xa82422A5FD4F9cB85cD4aAc393cD3296A27dD873\",\n  ZAPIN_ADDRESS: \"0xc669dC61aF974FdF50758d95306e4083D36f1430\",\n  REDEEM_ADDRESS: \"0xFc3625cD7a5C9D40BfE6EE075A73867B32073f5E\"\n};\nexport const getAddresses = networkID => {\n  if (networkID === Networks.AVAX) return AVAX_MAINNET;\n  throw Error(\"Network don't support\");\n};","map":{"version":3,"sources":["/Users/anthonymann/Desktop/Snowbank DAO/snowbank-frontend/src/constants/addresses.ts"],"names":["Networks","AVAX_MAINNET","DAO_ADDRESS","SSB_ADDRESS","WSSB_ADDRESS","SB_ADDRESS","MIM_ADDRESS","STAKING_ADDRESS","STAKING_HELPER_ADDRESS","SB_BONDING_CALC_ADDRESS","TREASURY_ADDRESS","ZAPIN_ADDRESS","REDEEM_ADDRESS","getAddresses","networkID","AVAX","Error"],"mappings":"AAAA,SAASA,QAAT,QAAyB,cAAzB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAE,4CADI;AAEjBC,EAAAA,WAAW,EAAE,4CAFI;AAGjBC,EAAAA,YAAY,EAAE,4CAHG;AAIjBC,EAAAA,UAAU,EAAE,4CAJK;AAKjBC,EAAAA,WAAW,EAAE,4CALI;AAMjBC,EAAAA,eAAe,EAAE,4CANA;AAOjBC,EAAAA,sBAAsB,EAAE,4CAPP;AAQjBC,EAAAA,uBAAuB,EAAE,4CARR;AASjBC,EAAAA,gBAAgB,EAAE,4CATD;AAUjBC,EAAAA,aAAa,EAAE,4CAVE;AAWjBC,EAAAA,cAAc,EAAE;AAXC,CAArB;AAcA,OAAO,MAAMC,YAAY,GAAIC,SAAD,IAAuB;AAC/C,MAAIA,SAAS,KAAKd,QAAQ,CAACe,IAA3B,EAAiC,OAAOd,YAAP;AAEjC,QAAMe,KAAK,CAAC,uBAAD,CAAX;AACH,CAJM","sourcesContent":["import { Networks } from \"./blockchain\";\n\nconst AVAX_MAINNET = {\n    DAO_ADDRESS: \"0x561c56b6ea927c157A9F51fCcCfa50B777c1EA7C\",\n    SSB_ADDRESS: \"0xE9Eb40d52CE4744322204d4a29Af63C30f0260a4\",\n    WSSB_ADDRESS: \"0x31C4c046EFAD4B04b823a919CC0bDd0f663c87d4\",\n    SB_ADDRESS: \"0x7d1232b90d3f809a54eeaeebc639c62df8a8942f\",\n    MIM_ADDRESS: \"0x130966628846BFd36ff31a822705796e8cb8C18D\",\n    STAKING_ADDRESS: \"0x85784d5e2CCae89Bcb39EbF0ac6Cdc93d42d99AD\",\n    STAKING_HELPER_ADDRESS: \"0x3d371d925Db78F8e46130AF95756789ecE6387ce\",\n    SB_BONDING_CALC_ADDRESS: \"0xf1AC1eD0Ef7F61223df64e52A6E6E1d6Ca6f992b\",\n    TREASURY_ADDRESS: \"0xa82422A5FD4F9cB85cD4aAc393cD3296A27dD873\",\n    ZAPIN_ADDRESS: \"0xc669dC61aF974FdF50758d95306e4083D36f1430\",\n    REDEEM_ADDRESS: \"0xFc3625cD7a5C9D40BfE6EE075A73867B32073f5E\",\n};\n\nexport const getAddresses = (networkID: number) => {\n    if (networkID === Networks.AVAX) return AVAX_MAINNET;\n\n    throw Error(\"Network don't support\");\n};\n"]},"metadata":{},"sourceType":"module"}