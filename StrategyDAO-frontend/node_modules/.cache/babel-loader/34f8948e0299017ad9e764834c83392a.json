{"ast":null,"code":"var _jsxFileName = \"/Users/anthonymann/Desktop/Snowbank DAO/snowbank-frontend/src/components/RebaseTimer/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\";\nimport { secondsUntilBlock, prettifySeconds } from \"../../helpers\";\nimport { Box } from \"@material-ui/core\";\nimport \"./rebasetimer.scss\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport { useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RebaseTimer() {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const currentBlockTime = useSelector(state => {\n    return state.app.currentBlockTime;\n  });\n  const nextRebase = useSelector(state => {\n    return state.app.nextRebase;\n  });\n  const timeUntilRebase = useMemo(() => {\n    if (currentBlockTime && nextRebase) {\n      const seconds = secondsUntilBlock(currentBlockTime, nextRebase);\n      return prettifySeconds(seconds);\n    }\n  }, [currentBlockTime, nextRebase]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: \"rebase-timer\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: currentBlockTime ? timeUntilRebase ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: t(\"TimeToNextRebase\", {\n          time: timeUntilRebase\n        })\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: t(\"Rebasing\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 112\n      }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n        width: \"200px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 143\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RebaseTimer, \"P9Eetnui0fSLe7G0JfSeG1l5LIU=\", false, function () {\n  return [useTranslation, useSelector, useSelector];\n});\n\n_c = RebaseTimer;\nexport default RebaseTimer;\n\nvar _c;\n\n$RefreshReg$(_c, \"RebaseTimer\");","map":{"version":3,"sources":["/Users/anthonymann/Desktop/Snowbank DAO/snowbank-frontend/src/components/RebaseTimer/index.tsx"],"names":["useSelector","secondsUntilBlock","prettifySeconds","Box","Skeleton","useMemo","useTranslation","RebaseTimer","t","currentBlockTime","state","app","nextRebase","timeUntilRebase","seconds","time"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,iBAAT,EAA4BC,eAA5B,QAAmD,eAAnD;AACA,SAASC,GAAT,QAAoB,mBAApB;AACA,OAAO,oBAAP;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,OAAxB;AAGA,SAASC,cAAT,QAA+B,eAA/B;;;;AAEA,SAASC,WAAT,GAAuB;AAAA;;AACnB,QAAM;AAAEC,IAAAA;AAAF,MAAQF,cAAc,EAA5B;AAEA,QAAMG,gBAAgB,GAAGT,WAAW,CAAsBU,KAAK,IAAI;AAC/D,WAAOA,KAAK,CAACC,GAAN,CAAUF,gBAAjB;AACH,GAFmC,CAApC;AAIA,QAAMG,UAAU,GAAGZ,WAAW,CAAsBU,KAAK,IAAI;AACzD,WAAOA,KAAK,CAACC,GAAN,CAAUC,UAAjB;AACH,GAF6B,CAA9B;AAIA,QAAMC,eAAe,GAAGR,OAAO,CAAC,MAAM;AAClC,QAAII,gBAAgB,IAAIG,UAAxB,EAAoC;AAChC,YAAME,OAAO,GAAGb,iBAAiB,CAACQ,gBAAD,EAAmBG,UAAnB,CAAjC;AACA,aAAOV,eAAe,CAACY,OAAD,CAAtB;AACH;AACJ,GAL8B,EAK5B,CAACL,gBAAD,EAAmBG,UAAnB,CAL4B,CAA/B;AAOA,sBACI,QAAC,GAAD;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,2BACI;AAAA,gBAAIH,gBAAgB,GAAGI,eAAe,gBAAG;AAAA,kBAAGL,CAAC,CAAC,kBAAD,EAAqB;AAAEO,UAAAA,IAAI,EAAEF;AAAR,SAArB;AAAJ,uBAAH,gBAA6D;AAAA,kBAAOL,CAAC,CAAC,UAAD;AAAR;AAAA;AAAA;AAAA;AAAA,cAA/E,gBAA8G,QAAC,QAAD;AAAU,QAAA,KAAK,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA;AAAlI;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAvBQD,W;UACSD,c,EAEWN,W,EAINA,W;;;KAPdO,W;AAyBT,eAAeA,WAAf","sourcesContent":["import { useSelector } from \"react-redux\";\nimport { secondsUntilBlock, prettifySeconds } from \"../../helpers\";\nimport { Box } from \"@material-ui/core\";\nimport \"./rebasetimer.scss\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport { useMemo } from \"react\";\nimport { IReduxState } from \"../../store/slices/state.interface\";\n\nimport { useTranslation } from \"react-i18next\";\n\nfunction RebaseTimer() {\n    const { t } = useTranslation();\n\n    const currentBlockTime = useSelector<IReduxState, number>(state => {\n        return state.app.currentBlockTime;\n    });\n\n    const nextRebase = useSelector<IReduxState, number>(state => {\n        return state.app.nextRebase;\n    });\n\n    const timeUntilRebase = useMemo(() => {\n        if (currentBlockTime && nextRebase) {\n            const seconds = secondsUntilBlock(currentBlockTime, nextRebase);\n            return prettifySeconds(seconds);\n        }\n    }, [currentBlockTime, nextRebase]);\n\n    return (\n        <Box className=\"rebase-timer\">\n            <p>{currentBlockTime ? timeUntilRebase ? <>{t(\"TimeToNextRebase\", { time: timeUntilRebase })}</> : <span>{t(\"Rebasing\")}</span> : <Skeleton width=\"200px\" />}</p>\n        </Box>\n    );\n}\n\nexport default RebaseTimer;\n"]},"metadata":{},"sourceType":"module"}